<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Setinsung</title>
  
  <subtitle>重新开始一个博客 | 希望今年不会摆烂</subtitle>
  <link href="https://setinsung.github.io/atom.xml" rel="self"/>
  
  <link href="https://setinsung.github.io/"/>
  <updated>2023-03-15T16:56:10.657Z</updated>
  <id>https://setinsung.github.io/</id>
  
  <author>
    <name>Setinsung</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C#之模拟简单的IOC容器练习</title>
    <link href="https://setinsung.github.io/blog/2023-03-16-csharp-ioc/"/>
    <id>https://setinsung.github.io/blog/2023-03-16-csharp-ioc/</id>
    <published>2023-03-15T16:56:10.000Z</published>
    <updated>2023-03-15T16:56:10.657Z</updated>
    
    <content type="html"><![CDATA[<p>C#之模拟简单的IOC容器练习，只模拟实现一小部分的功能</p><span id="more"></span><h2 id="C-之模拟简单的IOC容器练习"><a href="#C-之模拟简单的IOC容器练习" class="headerlink" title="C#之模拟简单的IOC容器练习"></a>C#之模拟简单的IOC容器练习</h2><h3 id="1-结构和步骤准备"><a href="#1-结构和步骤准备" class="headerlink" title="1.结构和步骤准备"></a>1.结构和步骤准备</h3><p><strong>步骤</strong></p><ol><li>创建ServiceLife服务生命周期枚举</li><li>创建服务描述类ServiceDescriptor，分为三种生命周期</li><li>创建ServiceCollection容器集合，用于添加和存储服务描述类实例</li><li>创建ServiceProvider根节点服务提供类，使用时声明为static</li><li>创建ServiceFactory容器工厂，用于通过容器集合创建根节点服务提供类实例</li><li>创建ServiceProviderScoped作用域服务提供类，也通过工厂用根节点服务提供类创建，用于获取作用域生命周期服务</li></ol><p><strong>准备</strong></p><ul><li>新建一个类库项目IocDemo，用于模拟IOC容器</li><li>新建一个WebAPI项目，用于测试自己写的容器</li></ul><h3 id="2-MyServiceLife"><a href="#2-MyServiceLife" class="headerlink" title="2.MyServiceLife"></a>2.MyServiceLife</h3><ul><li>服务生命周期枚举</li><li>在IocDemo.Container中删除默认的cs文件，新建一个枚举MyServiceLife</li><li>用来表示服务的生命周期</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">IocDemo.Container</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 服务生命周期枚举</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> MyServiceLife</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 瞬时</span></span><br><span class="line">        Transient,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 单例</span></span><br><span class="line">        Singleton,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//作用域</span></span><br><span class="line">        Scoped</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-MyServiceDescriptor"><a href="#3-MyServiceDescriptor" class="headerlink" title="3.MyServiceDescriptor"></a>3.MyServiceDescriptor</h3><ul><li>服务描述类</li><li>用于描述注入的服务的生命周期、类型和实现类型，同时用于存放服务实例</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">IocDemo.Container</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 服务描述类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyServiceDescriptor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 服务生命周期</span></span><br><span class="line">        <span class="keyword">public</span> MyServiceLife Life &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 服务类型</span></span><br><span class="line">        <span class="keyword">public</span> Type ServiceType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 服务实现类类型</span></span><br><span class="line">        <span class="keyword">public</span> Type ImplementType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现实例</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">object</span>? ImplementInstance &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-MyServiceCollection"><a href="#3-3-MyServiceCollection" class="headerlink" title="3.3 MyServiceCollection"></a>3.3 MyServiceCollection</h3><ul><li><p>容器，继承List集合用于存放服务</p><ul><li>添加的过程就是根据传入的服务类型和服务实现类等来创建一个服务描述类的实例，并加入到容器集合中</li><li>本来是要实现IEnumerable接口，但是这样之后还要实现一些方法，这里为了偷懒，直接继承List</li></ul></li><li><p>需要编写<strong>三个不同生命周期的注册服务方法</strong></p></li><li><p>由于使用到带有泛型的类的注册时，通过泛型注册的方法就不可用了，所以还需要附带一个根据Type注册的方法，用于适配更多的情况。</p></li><li><p>注册单例生命周期服务可以在注册的同时直接设置实例，也可以实现</p></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">IocDemo.Container</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyServiceCollection</span> : <span class="title">List</span>&lt;<span class="title">MyServiceDescriptor</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 注册瞬时生命周期服务，使用服务类和服务实现类泛型进行注册</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TService&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TImplement&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddTransient</span>&lt;<span class="title">TService</span>, <span class="title">TImplement</span>&gt;()</span></span><br><span class="line"><span class="function">            <span class="keyword">where</span> TService : <span class="keyword">class</span></span></span><br><span class="line"><span class="function">            <span class="keyword">where</span> TImplement : <span class="keyword">class</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            AddTransient(<span class="keyword">typeof</span>(TService), <span class="keyword">typeof</span>(TImplement));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 注册瞬时生命周期服务，使用服务类和服务实现类的Type进行注册</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;serviceType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;implementType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddTransient</span>(<span class="params">Type serviceType, Type implementType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MyServiceDescriptor descriptor = <span class="keyword">new</span>()</span><br><span class="line">            &#123;</span><br><span class="line">                Life = MyServiceLife.Transient,</span><br><span class="line">                ServiceType = serviceType,</span><br><span class="line">                ImplementType = implementType</span><br><span class="line">            &#125;;</span><br><span class="line">            AddIfNotContent(descriptor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 注册作用域生命周期服务，使用服务类和服务实现类泛型进行注册</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TService&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TImplement&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddScoped</span>&lt;<span class="title">TService</span>, <span class="title">TImplement</span>&gt;()</span></span><br><span class="line"><span class="function">            <span class="keyword">where</span> TService : <span class="keyword">class</span></span></span><br><span class="line"><span class="function">            <span class="keyword">where</span> TImplement : <span class="keyword">class</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            AddScoped(<span class="keyword">typeof</span>(TService), <span class="keyword">typeof</span>(TImplement));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 注册作用域生命周期服务，使用服务类和服务实现类的Type进行注册</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;serviceType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;implementType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddScoped</span>(<span class="params">Type serviceType, Type implementType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MyServiceDescriptor descriptor = <span class="keyword">new</span>()</span><br><span class="line">            &#123;</span><br><span class="line">                Life = MyServiceLife.Scoped,</span><br><span class="line">                ServiceType = serviceType,</span><br><span class="line">                ImplementType = implementType</span><br><span class="line">            &#125;;</span><br><span class="line">            AddIfNotContent(descriptor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 注册单例生命周期服务，使用服务类和服务实现类泛型进行注册</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TService&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TImplement&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddSingleton</span>&lt;<span class="title">TService</span>, <span class="title">TImplement</span>&gt;()</span></span><br><span class="line"><span class="function">            <span class="keyword">where</span> TService : <span class="keyword">class</span></span></span><br><span class="line"><span class="function">            <span class="keyword">where</span> TImplement : <span class="keyword">class</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            AddSingleton(<span class="keyword">typeof</span>(TService), <span class="keyword">typeof</span>(TImplement), <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 注册单例生命周期服务，使用服务实现类泛型进行注册且直接设置单例</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TService&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TImplement&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddSingleton</span>&lt;<span class="title">TService</span>&gt;(<span class="params"><span class="built_in">object</span> instance</span>)</span></span><br><span class="line"><span class="function">            <span class="keyword">where</span> TService : <span class="keyword">class</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            AddSingleton(<span class="keyword">typeof</span>(TService), instance.GetType(), instance);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 注册单例生命周期服务，使用服务类和服务实现类的Type进行注册</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;serviceType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;implementType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddSingleton</span>(<span class="params">Type serviceType, Type implementType, Object instance</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> descriptor = <span class="keyword">new</span> MyServiceDescriptor()</span><br><span class="line">            &#123;</span><br><span class="line">                Life = MyServiceLife.Singleton,</span><br><span class="line">                ServiceType = serviceType,</span><br><span class="line">                ImplementType = implementType,</span><br><span class="line">                ImplementInstance = instance</span><br><span class="line">            &#125;;</span><br><span class="line">            AddIfNotContent(descriptor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 向MyServiceCollection集合中添加服务描述类实例</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;descriptor&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddIfNotContent</span>(<span class="params">MyServiceDescriptor descriptor</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.Any(m =&gt; m.ServiceType == descriptor.ServiceType &amp;&amp; m.ImplementType == descriptor.ImplementType))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.Add(descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-MyServiceProvider"><a href="#3-4-MyServiceProvider" class="headerlink" title="3.4 MyServiceProvider"></a>3.4 MyServiceProvider</h3><ul><li>根节点服务提供类</li><li>这里使用线程安全字典存储，模拟高并发的情况，这个字典用于存储容器中注册的服务类型和服务描述类</li><li>ResizeService方法用于将容器集合中的服务转移到字典中，用于之后根据Type类型获取服务描述类，即可进一步获取服务。</li><li>GetService用于从MyServiceProvider中获取服务，此处暂时不写</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">IocDemo.Container</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 根节点的服务提供者</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyServiceProvider</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> ConcurrentDictionary&lt;Type, MyServiceDescriptor&gt; RootDictionary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyServiceProvider</span>(<span class="params">MyServiceCollection myServices</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            RootDictionary = <span class="keyword">new</span>();</span><br><span class="line">            ResizeService(myServices);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 将容器中的服务转存到字典</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;myServices&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ResizeService</span>(<span class="params">MyServiceCollection myServices</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> service <span class="keyword">in</span> myServices)</span><br><span class="line">            &#123;</span><br><span class="line">                RootDictionary.TryAdd(service.ServiceType, service);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">object</span>? GetService()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">default</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-MyServiceFactory"><a href="#3-5-MyServiceFactory" class="headerlink" title="3.5 MyServiceFactory"></a>3.5 MyServiceFactory</h3><ul><li>容器工厂</li><li>这里只是对容器工厂简单实现，实际不可能这么简单</li><li>这里对MyServiceCollection扩展方法，用于通过容器创建根节点服务提供类实例</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">IocDemo.Container</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 只是简单实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyServiceFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 创建根节点服务提供类实例</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;services&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyServiceProvider <span class="title">BuildeProvider</span>(<span class="params"><span class="keyword">this</span> MyServiceCollection services</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyServiceProvider(services);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-MyServiceProviderScoped"><a href="#3-6-MyServiceProviderScoped" class="headerlink" title="3.6 MyServiceProviderScoped"></a>3.6 MyServiceProviderScoped</h3><ul><li>作用域服务提供类</li><li>主要是为了针对Scoped作用域生命周期服务类型的获取</li><li>因为其生命周期就在于一个请求之内，因此此处不会发生高并发，使用普通的字典即可</li><li>字典存放服务类型和服务实例，<strong>用于获取单次请求的作用域生命周期服务的实例</strong></li><li>这里的字典需要通过根节点服务提供类的字典生成，实际使用中MyServiceProviderScoped会在每一次请求中通过静态的根节点服务提供类创建</li><li>而获取服务的GetService就直接调用根节点的同名方法即可，需要传入Type服务类型来获取服务，而MyServiceProviderScoped自身也需要传入，因为需要用来获取Scoped作用域生命周期服务</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IocDemo.Container</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 作用域服务提供类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyServiceProviderScoped</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 用于存放服务类型和服务实例之间的映射，用于获取作用域单例</span></span><br><span class="line">        <span class="keyword">public</span> Dictionary&lt;Type, <span class="built_in">object</span>&gt; ScopedDictionary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 存放根节点服务提供类实例</span></span><br><span class="line">        <span class="keyword">public</span> MyServiceProvider RootProvider &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyServiceProviderScoped</span>(<span class="params">MyServiceProvider rootProvider</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            RootProvider = rootProvider;</span><br><span class="line">            ScopedDictionary = <span class="keyword">new</span>();</span><br><span class="line">            </span><br><span class="line">            ResizeService(RootProvider.RootDictionary);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 将根节点服务提供类的字典的服务类型和服务描述类转存到作用域服务提供类中，实现单次请求的作用域生命周期</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;rootDictionary&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ResizeService</span>(<span class="params">ConcurrentDictionary&lt;Type, MyServiceDescriptor&gt; rootDictionary</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> rootDictionary)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 只接收实例，没有实例的服务描述类也一并存入</span></span><br><span class="line">                ScopedDictionary.TryAdd(item.Key, item.Value.ImplementInstance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取服务，直接调用根节点服务提供类的GetService，并把自己传入，仅在获取作用域单例时使用</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;servicetype&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">object</span>? GetService(Type servicetype)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> RootProvider.GetService(servicetype, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-MyServiceProvider-GetService方法"><a href="#3-7-MyServiceProvider-GetService方法" class="headerlink" title="3.7 MyServiceProvider.GetService方法"></a>3.7 MyServiceProvider.GetService方法</h3><ul><li>首先要在当前的根字典RootDictionary查询要获取的服务类型是否具有服务描述类的值，成功后针对三个不同的生命周期分别操作</li><li>①默认和瞬时生命周期<ul><li>因为是即用即弃，直接通过服务实现类型反射返回实例</li></ul></li><li>②单例生命周期<ul><li>首先查看对应的服务描述类是否有存储实例，没有则也通过反射创建并存储，然后返回</li></ul></li><li>③作用域生命周期<ul><li>在作用域服务提供类MyServiceProviderScoped中的字典中查看是否存储了对应的服务实例，没有则反射创建并存到字典中，返回</li></ul></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IocDemo.Container</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 根节点服务提供类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyServiceProvider</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> ConcurrentDictionary&lt;Type, MyServiceDescriptor&gt; RootDictionary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyServiceProvider</span>(<span class="params">MyServiceCollection myServices</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            RootDictionary = <span class="keyword">new</span>();</span><br><span class="line">            ResizeService(myServices);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 将容器中的服务转存到字典</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;myServices&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ResizeService</span>(<span class="params">MyServiceCollection myServices</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> service <span class="keyword">in</span> myServices)</span><br><span class="line">            &#123;</span><br><span class="line">                RootDictionary.TryAdd(service.ServiceType, service);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取服务</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">                <span class="keyword">public</span> <span class="built_in">object</span>? GetService(Type serviecType, MyServiceProviderScoped serviceProviderScoped)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> hasValue = RootDictionary.TryGetValue(serviecType, <span class="keyword">out</span> MyServiceDescriptor? serviceDescriptor);</span><br><span class="line">            <span class="keyword">if</span>(hasValue)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span> (serviceDescriptor!.Life)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 默认和瞬时生命周期，直接反射返回实例</span></span><br><span class="line">                    <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">case</span> MyServiceLife.Transient:</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> Activator.CreateInstance(serviceDescriptor.ImplementType);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 单例生命周期，从服务描述类用于存放实例的属性ImplementInstance中拿取，没有则创建并存到属性中</span></span><br><span class="line">                    <span class="keyword">case</span> MyServiceLife.Singleton:</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(serviceDescriptor.ImplementInstance == <span class="literal">null</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            serviceDescriptor.ImplementInstance = Activator.CreateInstance(serviceDescriptor.ImplementType);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> serviceDescriptor.ImplementInstance;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 作用域生命周期，从作用域服务提供类实例中的字典中获取，没有则创建并存到字典中</span></span><br><span class="line">                    <span class="keyword">case</span> MyServiceLife.Scoped:</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(serviceProviderScoped.ScopedDictionary.TryGetValue(serviecType, <span class="keyword">out</span> <span class="built_in">object</span>? instance))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                instance = Activator.CreateInstance(serviceDescriptor.ImplementType);</span><br><span class="line">                                serviceProviderScoped.ScopedDictionary[serviecType] = instance!;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> instance;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-ServiceFactory增加MyServiceProviderScoped创建"><a href="#3-8-ServiceFactory增加MyServiceProviderScoped创建" class="headerlink" title="3.8 ServiceFactory增加MyServiceProviderScoped创建"></a>3.8 ServiceFactory增加MyServiceProviderScoped创建</h3><ul><li>对MyServiceProvider扩展方法，用于通过根节点服务提供类创建MyServiceProviderScoped作用域服务提供类</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">IocDemo.Container</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 容器工厂简单实现</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyServiceFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 创建根节点服务提供类实例</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;services&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyServiceProvider <span class="title">BuildeProvider</span>(<span class="params"><span class="keyword">this</span> MyServiceCollection services</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyServiceProvider(services);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 通过根节点服务提供类实例创建作用域服务提供类实例创建</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;myServiceProvider&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyServiceProviderScoped <span class="title">CreateScoped</span>(<span class="params"><span class="keyword">this</span> MyServiceProvider myServiceProvider</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyServiceProviderScoped(myServiceProvider);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9-WebAPI中测试"><a href="#3-9-WebAPI中测试" class="headerlink" title="3.9 WebAPI中测试"></a>3.9 WebAPI中测试</h3><p>直接在WeatherForecastController.cs中测试：</p><ul><li>首先是创建全局静态容器，模拟框架的创建全局静态容器，这样单例生命周期的服务将一直存储在全局静态容器中的服务描述类里。</li><li>然后创建一个静态的根节点服务提供者，模拟框架的静态服务提供类</li><li>每次请求中创建一个作用域服务提供类实例，模拟框架的局部作用域服务提供类，用于暂存和获取作用域服务。在一次请求结束后，将会释放。</li><li>然后在控制器的构造方法中注册服务并生成服务提供类实例进行模拟</li><li>在每次请求时先创建作用域服务提供类实例模拟每次请求的作用域单例存放和获取</li><li>最后就是获取服务测试是否成功了</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">IocDemo.Api.Controllers</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecastController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建全局静态容器</span></span><br><span class="line">    <span class="keyword">static</span> MyServiceCollection services = <span class="keyword">new</span>();</span><br><span class="line">    <span class="comment">// 创建静态的根节点服务提供类</span></span><br><span class="line">    <span class="keyword">static</span> MyServiceProvider provider;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherForecastController</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 注册服务</span></span><br><span class="line">        services.AddScoped&lt;IUser,User&gt;();</span><br><span class="line">        services.AddSingleton&lt;IRole&gt;(<span class="keyword">new</span> Role());</span><br><span class="line"><span class="comment">// 生成服务提供类实例</span></span><br><span class="line">        <span class="keyword">if</span>(provider == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            provider = services.BuildProvider();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpGet(Name = <span class="string">&quot;GetWeatherForecast&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Get</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 每次请求,创建作用域服务提供类实例</span></span><br><span class="line">        <span class="keyword">var</span> providerScoped = provider.CreateScoped();</span><br><span class="line">        <span class="comment">// 获取服务</span></span><br><span class="line">        <span class="keyword">var</span> a = providerScoped.GetService(<span class="keyword">typeof</span>(IUser));</span><br><span class="line">        <span class="keyword">var</span> b = providerScoped.GetService(<span class="keyword">typeof</span>(IUser));</span><br><span class="line">        <span class="keyword">var</span> c = providerScoped.GetService(<span class="keyword">typeof</span>(IRole));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;C#之模拟简单的IOC容器练习，只模拟实现一小部分的功能&lt;/p&gt;</summary>
    
    
    
    <category term="DOTNET" scheme="https://setinsung.github.io/categories/dotnet/"/>
    
    
    <category term="C#" scheme="https://setinsung.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>学习和远程联机</title>
    <link href="https://setinsung.github.io/blog/2023-03-15-journal/"/>
    <id>https://setinsung.github.io/blog/2023-03-15-journal/</id>
    <published>2023-03-14T17:50:53.000Z</published>
    <updated>2023-03-15T15:49:05.811Z</updated>
    
    <content type="html"><![CDATA[<p>学了下习，远程联机玩了下游戏</p><span id="more"></span><h4 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h4><p>学习了网络安全的基础知识，下了好几个工具，接下来就准备开始靶场练习了。</p><h4 id="外设"><a href="#外设" class="headerlink" title="外设"></a>外设</h4><p>开寝室门的时候，耳机摔坏了，这是第二个坏掉的有线耳机。</p><p>有线耳机戴着舒服一些，不然肯定用无线了，当然也是我没钱买高级的无线耳机，现在用的还不小心掉了一个，但是单只用还是凑合的。</p><p>然后，电脑爆满了，简单看了下硬盘推荐，买了个1t的移动固态硬盘。</p><p>真的是难以预料，安装的东西越来越多，特别是网安后面可能要装几个虚拟机。我使用了好几个工具清理，以及SpaceSniffer去查看容量，手动删除但是无从下手。买一个移动固态硬盘其实也不算是很好的办法。但是无所谓了。</p><h4 id="远程联机"><a href="#远程联机" class="headerlink" title="远程联机"></a>远程联机</h4><p>远程联机的解决方案有很多，我只尝试过小部分。</p><p>steam的远程畅玩需要比如uu加速器的加速，但是这个需要一定的付费。</p><p>然后是parsec，虽然免费，而且很多人推荐使用。但是移动直接把它墙了，通过更多手段用起来延迟也很高了，而且墙之前试过，校园网里使用，不知道是不是个人原因，使用起来延迟不低。</p><p>还有腾讯会议，这个还是不错的，成功玩过多次游戏，延迟小，而且免费，不过好像只能2个人使用。有时候需要3个人的场景，就不行了。</p><p>最后找到闪门，这个应该是可以多人使用的，但是之前尝试时候是2个人，打完了一把游戏。延迟不高，感觉好像还行，但是需要付费。这个费用好像能承受，之后看看3人的效果怎么样再说了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学了下习，远程联机玩了下游戏&lt;/p&gt;</summary>
    
    
    
    <category term="日记" scheme="https://setinsung.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="journal" scheme="https://setinsung.github.io/tags/journal/"/>
    
  </entry>
  
  <entry>
    <title>第二周的结束</title>
    <link href="https://setinsung.github.io/blog/2023-03-13-journal/"/>
    <id>https://setinsung.github.io/blog/2023-03-13-journal/</id>
    <published>2023-03-12T18:10:31.000Z</published>
    <updated>2023-03-13T15:58:10.496Z</updated>
    
    <content type="html"><![CDATA[<p>第二周的结束，摸鱼</p><span id="more"></span><h4 id="摸鱼"><a href="#摸鱼" class="headerlink" title="摸鱼"></a>摸鱼</h4><p>这周，摸鱼了很多，周末也没有学很多东西。第二周结束了，下周再努力吧XD</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;第二周的结束，摸鱼&lt;/p&gt;</summary>
    
    
    
    <category term="日记" scheme="https://setinsung.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="journal" scheme="https://setinsung.github.io/tags/journal/"/>
    
  </entry>
  
  <entry>
    <title>C#之反射注入简单练习</title>
    <link href="https://setinsung.github.io/blog/2023-03-12-csharp/"/>
    <id>https://setinsung.github.io/blog/2023-03-12-csharp/</id>
    <published>2023-03-11T17:57:11.000Z</published>
    <updated>2023-03-12T01:27:28.563Z</updated>
    
    <content type="html"><![CDATA[<p>C#之AutoFac 简单练习，使用反射的方式并区分生命周期进行反射依赖注入</p><span id="more"></span><h2 id="反射注入简单练习"><a href="#反射注入简单练习" class="headerlink" title="反射注入简单练习"></a>反射注入简单练习</h2><ul><li>首先要安装一个Nuget包：<strong>Microsoft.Extensions.DependencyModel</strong><ul><li>用于获取应用程序及其依赖项的元数据信息，包括程序集名称、版本号、依赖关系等</li><li>支持多种格式的依赖项文件，例如项目文件、NuGet包、Assembly文件等</li><li>提供了API来查询和操作应用程序的依赖项信息，包括检查程序集是否存在、获取程序集的依赖项列表等</li></ul></li></ul><h3 id="1-获取依赖项"><a href="#1-获取依赖项" class="headerlink" title="1.获取依赖项"></a>1.获取依赖项</h3><ul><li>首先获取应用程序的依赖项信息，返回CompilationLibrary集合，其包含了所有被编译进应用程序中的程序集及其依赖项元数据列表</li><li>接下来对依赖项集合筛选过滤，返回所有非Serviceable类型且Type为”project”的依赖项。其中，Serviceable表示依赖项是否可服务化，而Type则表示依赖项的类型，”project”表示（自己创建的）项目依赖项，不是来自NuGet等外部源的依赖项<ul><li>Serviceable：指依赖项是否可被服务化，可服务化程序集一般用于兼容性替代。如果一个程序集被标记为Serviceable，说明它只能被其他程序集引用，而不能被直接加载。</li><li>因此，在这里需要排除可服务化的程序集，只加载非服务化的项目程序集。如果不加入该条件，可能获取到不需要的依赖项，那对于去除就会麻烦</li></ul></li><li>以下代码记住就好了</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> libs = DependencyContext.Default </span><br><span class="line">    .CompileLibraries</span><br><span class="line">    .Where(x=&gt;!x.Serviceable &amp;&amp; x.Type == <span class="string">&quot;project&quot;</span>).ToList(); </span><br></pre></td></tr></table></figure><h3 id="2-获取项目所有程序集的类型"><a href="#2-获取项目所有程序集的类型" class="headerlink" title="2.获取项目所有程序集的类型"></a>2.获取项目所有程序集的类型</h3><ul><li>实现通过依赖项的名称制成Assembly</li><li>AssemblyLoadContext：表示程序集的加载上下文，允许加载和卸载程序集，通过静态属性Default来访问</li><li>AssemblyName：表示程序集的完整名称。这里通过使用 lib.Name（当前依赖项的名称）来创建AssemblyName实例，因为方法要用</li><li>LoadFromAssemblyName：通过AssemblyName参数加载指定名称的程序集返回Assembly</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Assembly&gt; assemblies = <span class="keyword">new</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> lib <span class="keyword">in</span> libs)</span><br><span class="line">&#123;</span><br><span class="line">    assemblies.Add(AssemblyLoadContext.Default</span><br><span class="line">       .LoadFromAssemblyName(<span class="keyword">new</span> AssemblyName(lib.Name)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-通过反射程序集的类型注册服务"><a href="#3-通过反射程序集的类型注册服务" class="headerlink" title="3.通过反射程序集的类型注册服务"></a>3.通过反射程序集的类型注册服务</h3><ul><li>首先将assemblies程序集中的所有类型注册到Autofac容器中</li><li>然后筛选出了所有实现了IocTag接口的非抽象类型（IocTag是自己创建的接口，相当于标签，用于筛选）</li><li>将筛选出来的所有类型都注册为自身类型和其实现的所有接口类型</li><li>最后是指定注册的服务生命周期为作用域生命周期</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">builder.RegisterAssemblyTypes(assemblies.ToArray())</span><br><span class="line">    .Where(t=&gt;t.IsAssignableTo&lt;IocTag&gt;() &amp;&amp; !t.IsAbstract)</span><br><span class="line">    .AsSelf().AsImplementedInterfaces()</span><br><span class="line">    .InstancePerLifetimeScope();</span><br></pre></td></tr></table></figure><h3 id="4-区分生命周期的反射注入"><a href="#4-区分生命周期的反射注入" class="headerlink" title="4.区分生命周期的反射注入"></a>4.区分生命周期的反射注入</h3><ul><li>为了区分生命周期，将IocTag分为3个生命周期</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IocTagScope</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IocTagSingleton</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IocTagTransient</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里在注册时，就分别对三个生命周期类型进行筛选并注册不同的生命周期类型</li><li>并加上了允许属性注入</li><li>注册ControllerBase，使用依赖注入框架来管理应用程序中的组件时，也需要将控制器类型注册到容器中</li></ul><p>完整代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Loader;</span><br><span class="line"><span class="keyword">using</span> Autofac;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Demo.Utility</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoUtilityModule</span> : <span class="title">Autofac.Module</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Load</span>(<span class="params">ContainerBuilder builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> libs = DependencyContext.Default </span><br><span class="line">        .CompileLibraries</span><br><span class="line">        .Where(x=&gt;!x.Serviceable &amp;&amp; x.Type == <span class="string">&quot;project&quot;</span>).ToList(); </span><br><span class="line">        </span><br><span class="line">        List&lt;Assembly&gt; assemblies = <span class="keyword">new</span>();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> lib <span class="keyword">in</span> libs)</span><br><span class="line">        &#123;</span><br><span class="line">            assemblies.Add(AssemblyLoadContext.Default</span><br><span class="line">            .LoadFromAssemblyName(<span class="keyword">new</span> AssemblyName(lib.Name)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        builder.RegisterAssemblyTypes(assemblies.ToArray())</span><br><span class="line">        .Where(t =&gt; t.IsAssignableTo&lt;IocTagScope&gt;() &amp;&amp; !t.IsAbstract)</span><br><span class="line">        .AsSelf().AsImplementedInterfaces()</span><br><span class="line">        .InstancePerLifetimeScope()</span><br><span class="line">        .PropertiesAutowired();</span><br><span class="line"></span><br><span class="line">        builder.RegisterAssemblyTypes(assemblies.ToArray())</span><br><span class="line">        .Where(t =&gt; t.IsAssignableTo&lt;IocTagSingleton&gt;() &amp;&amp; !t.IsAbstract)</span><br><span class="line">        .AsSelf().AsImplementedInterfaces()</span><br><span class="line">        .SingleInstance()</span><br><span class="line">        .PropertiesAutowired();</span><br><span class="line"></span><br><span class="line">        builder.RegisterAssemblyTypes(assemblies.ToArray())</span><br><span class="line">        .Where(t =&gt; t.IsAssignableTo&lt;IocTagTransient&gt;() &amp;&amp; !t.IsAbstract)</span><br><span class="line">        .AsSelf().AsImplementedInterfaces()</span><br><span class="line">        .PropertiesAutowired();</span><br><span class="line"></span><br><span class="line">        builder.RegisterAssemblyTypes(assemblies.ToArray())</span><br><span class="line">        .Where(t =&gt; t.IsAssignableTo&lt;ControllerBase&gt;() &amp;&amp; !t.IsAbstract)</span><br><span class="line">        .AsSelf()</span><br><span class="line">        .PropertiesAutowired();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ul><li>此时在一个测试项目中注册模块，随便创建几个接口继承三个IocTag并创建实现类去使用，可见注入成功</li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;C#之AutoFac 简单练习，使用反射的方式并区分生命周期进行反射依赖注入&lt;/p&gt;</summary>
    
    
    
    <category term="DOTNET" scheme="https://setinsung.github.io/categories/dotnet/"/>
    
    
    <category term="C#" scheme="https://setinsung.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>nodejs仿照express封装框架简单练习</title>
    <link href="https://setinsung.github.io/blog/2023-03-11-nodejs/"/>
    <id>https://setinsung.github.io/blog/2023-03-11-nodejs/</id>
    <published>2023-03-10T17:33:07.000Z</published>
    <updated>2023-03-10T18:07:16.495Z</updated>
    
    <content type="html"><![CDATA[<p>Nodejs简单练习，仿照express封装一个简单的框架</p><span id="more"></span><h2 id="1-Nodejs仿照express封装框架"><a href="#1-Nodejs仿照express封装框架" class="headerlink" title="1.Nodejs仿照express封装框架"></a>1.Nodejs仿照express封装框架</h2><h3 id="1-0-首先封装web静态服务器"><a href="#1-0-首先封装web静态服务器" class="headerlink" title="1.0 首先封装web静态服务器"></a>1.0 首先封装web静态服务器</h3><ul><li>如果请求来的不是favicon.ico，就去找静态资源里的相应文件相应回去给浏览器展示</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">//获取地址</span></span><br><span class="line">  <span class="keyword">let</span> pathname = req.<span class="property">url</span></span><br><span class="line">  <span class="comment">// 如果访问/就也加载index.html</span></span><br><span class="line">  pathname = pathname == <span class="string">&#x27;/&#x27;</span> ? <span class="string">&#x27;/index.html&#x27;</span> : pathname</span><br><span class="line">  <span class="comment">//通过fs模块读取文件</span></span><br><span class="line">  <span class="keyword">if</span> (pathname == <span class="string">&#x27;/favicon.ico&#x27;</span>) res.<span class="title function_">end</span>()</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./static&#x27;</span> + pathname, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="comment">//找不到文件错误时，应设置404响应头</span></span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&#x27;这个页面不存在&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><p>此时发现进去网页无法呈现css样式，那么就需要修改。</p><ul><li>因为css文件的请求，不能也把响应头设置为text&#x2F;html，而是text&#x2F;css，其它文件如js类似，所以应该根据每一个请求的文件的后缀名去动态设置相应的响应头</li></ul></li><li><p>首先创建module&#x2F;common.js</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">getMime</span> = <span class="keyword">function</span>(<span class="params">extname</span>)&#123;</span><br><span class="line">    extname = extname.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (extname == <span class="string">&#x27;&#x27;</span>) extname == <span class="string">&#x27;html&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;text/&#x27;</span> + (extname == <span class="string">&#x27;js&#x27;</span> ? <span class="string">&#x27;javascript&#x27;</span> : extname)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.js中导入自定义模块，动态设置响应头</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./module/common.js&#x27;</span>)</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">//获取地址</span></span><br><span class="line">  <span class="keyword">let</span> pathname = req.<span class="property">url</span></span><br><span class="line">  <span class="comment">// 如果访问/就也加载index.html</span></span><br><span class="line">  pathname = pathname == <span class="string">&#x27;/&#x27;</span> ? <span class="string">&#x27;/index.html&#x27;</span> : pathname</span><br><span class="line">  <span class="comment">//获取文件后缀名</span></span><br><span class="line">  <span class="keyword">let</span> extname = path.<span class="title function_">extname</span>(pathname)</span><br><span class="line">  <span class="comment">//通过fs模块读取文件</span></span><br><span class="line">  <span class="keyword">if</span> (pathname == <span class="string">&#x27;/favicon.ico&#x27;</span>) res.<span class="title function_">end</span>()</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./static&#x27;</span> + pathname, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="comment">//找不到文件错误时，应设置404响应头</span></span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&#x27;这个页面不存在&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mime = common.<span class="title function_">getMime</span>(extname)</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: mime + <span class="string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>此时发现json文件请求还是不行，那么继续优化。<ul><li>检查请求可见，对json文件的请求是这样的：<a href="http://127.0.0.1:3000/json/all.json?9498807885421825">http://127.0.0.1:3000/json/all.json?9498807885421825</a></li><li>那么就需要只获取签名的路径部分，请求参数不应该获取</li><li>那么就可以使用url模块解析只取除去请求参数的路径</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./module/common.js&#x27;</span>)</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">//获取地址，用URL对象获取去除请求参数的请求路径</span></span><br><span class="line">  <span class="keyword">let</span> pathname = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span></span><br><span class="line">  <span class="comment">// 如果访问/就也加载index.html</span></span><br><span class="line">  pathname = pathname == <span class="string">&#x27;/&#x27;</span> ? <span class="string">&#x27;/index.html&#x27;</span> : pathname</span><br><span class="line">  <span class="comment">//获取文件后缀名</span></span><br><span class="line">  <span class="keyword">let</span> extname = path.<span class="title function_">extname</span>(pathname)</span><br><span class="line">  <span class="comment">//通过fs模块读取文件</span></span><br><span class="line">  <span class="keyword">if</span> (pathname == <span class="string">&#x27;/favicon.ico&#x27;</span>) res.<span class="title function_">end</span>()</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./static&#x27;</span> + pathname, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="comment">//找不到文件错误时，应设置404响应头</span></span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&#x27;这个页面不存在&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mime = common.<span class="title function_">getMime</span>(extname)</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: mime + <span class="string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>但是响应类型还是不够健全，因为很多都不只是单个后缀名就是了，那么就需要优化<ul><li>通过一个记录了全部后缀类型和请求头对应关系的文件来设置即可（data&#x2F;mime.json）</li><li>先读取这个json文件，再转为对象形式，在通过文件后缀名得到请求头对应设置字符</li></ul></li></ul><p>common.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getMime</span> = <span class="keyword">function</span> (<span class="params">extname</span>) &#123;</span><br><span class="line">    extname = extname.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (extname == <span class="string">&#x27;&#x27;</span>) extname == <span class="string">&#x27;html&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;text/&#x27;</span> + (extname == <span class="string">&#x27;js&#x27;</span> ? <span class="string">&#x27;javascript&#x27;</span> : extname)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getFileMime</span> = <span class="keyword">function</span> (<span class="params">extname</span>) &#123;</span><br><span class="line">    <span class="comment">//异步方法不能直接返回这里得到的值，应要封装为一个promise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./data/mime.json&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">reject</span>(err)</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(data)[extname])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同步方式读取文件（必须等待此执行完毕）</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getFileMimeSync</span> = <span class="keyword">function</span> (<span class="params">extname</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./data/mime.json&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data)[extname]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./module/common.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">//获取地址，用URL对象获取去除请求参数的请求路径</span></span><br><span class="line">  <span class="keyword">let</span> pathname = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span></span><br><span class="line">  <span class="comment">// 如果访问/就也加载index.html</span></span><br><span class="line">  pathname = pathname == <span class="string">&#x27;/&#x27;</span> ? <span class="string">&#x27;/index.html&#x27;</span> : pathname</span><br><span class="line">  <span class="comment">//获取文件后缀名</span></span><br><span class="line">  <span class="keyword">let</span> extname = path.<span class="title function_">extname</span>(pathname)</span><br><span class="line">  <span class="comment">//通过fs模块读取文件</span></span><br><span class="line">  <span class="keyword">if</span> (pathname == <span class="string">&#x27;/favicon.ico&#x27;</span>) res.<span class="title function_">end</span>()</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./static&#x27;</span> + pathname, <span class="keyword">async</span> (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="comment">//找不到文件错误时，应设置404响应头</span></span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&#x27;这个页面不存在&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 因为是异步的，所以用await和async来搞</span></span><br><span class="line">    <span class="keyword">let</span> mime = <span class="keyword">await</span> common.<span class="title function_">getFileMime</span>(extname)</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: mime + <span class="string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="1-1-封装使一行代码创建静态web服务"><a href="#1-1-封装使一行代码创建静态web服务" class="headerlink" title="1.1 封装使一行代码创建静态web服务"></a>1.1 封装使一行代码创建静态web服务</h3><p>目的：只需传入静态web文件目录，一行代码即可创建服务</p><ul><li>首先修改上文的common.js为routes.js，将app.js中用于创建web服务的代码封装</li></ul><p>routes.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有方法</span></span><br><span class="line"><span class="keyword">let</span> getFileMime = <span class="keyword">function</span> (<span class="params">extname</span>) &#123;</span><br><span class="line">  <span class="comment">//异步方法不能直接返回这里得到的值，应要封装为一个promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./data/mime.json&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">reject</span>(err)</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(data)[extname])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同步方式读取文件（必须等待此执行完毕）</span></span><br><span class="line">getFileMimeSync = <span class="keyword">function</span> (<span class="params">extname</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./data/mime.json&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data)[extname]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// static创建静态web服务</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">static</span> = <span class="keyword">function</span> (<span class="params">req, res, staticPath</span>) &#123;</span><br><span class="line">  <span class="comment">//获取地址，用URL对象获取去除请求参数的请求路径</span></span><br><span class="line">  <span class="keyword">let</span> pathname = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span></span><br><span class="line">  <span class="comment">// 如果访问/就也加载index.html</span></span><br><span class="line">  pathname = pathname == <span class="string">&#x27;/&#x27;</span> ? <span class="string">&#x27;/index.html&#x27;</span> : pathname</span><br><span class="line">  <span class="comment">//获取文件后缀名</span></span><br><span class="line">  <span class="keyword">let</span> extname = path.<span class="title function_">extname</span>(pathname)</span><br><span class="line">  <span class="comment">//通过fs模块读取文件</span></span><br><span class="line">  <span class="keyword">if</span> (pathname == <span class="string">&#x27;/favicon.ico&#x27;</span>) res.<span class="title function_">end</span>()</span><br><span class="line">  <span class="comment">// 这里动态传入static地址</span></span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./&#x27;</span> + staticPath + pathname, <span class="keyword">async</span> (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="comment">//找不到文件错误时，应设置404响应头</span></span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&#x27;这个页面不存在&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mime = <span class="keyword">await</span> <span class="title function_">getFileMime</span>(extname)</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: mime + <span class="string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">&#x27;./module/routes.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// 创建静态web服务</span></span><br><span class="line">  routes.<span class="title function_">static</span>(req,res,<span class="string">&#x27;./static&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="1-2-构建基础的路由"><a href="#1-2-构建基础的路由" class="headerlink" title="1.2 构建基础的路由"></a>1.2 构建基础的路由</h3><p>官方解释：</p><ul><li>路由（Routing）是由一个URI（或者叫路径）和一个特定的HTTP 方法（GET、POST 等）组成的，涉及到应用如何响应客户端对某个网站节点的访问。</li></ul><p>通俗的说：</p><ul><li>路由指的就是针对不同请求的URL，处理不同的业务逻辑。</li></ul><p>案例：将上文项目添加路由配置</p><ul><li>首先routes.js中读取文件的操作需要改为同步，否则将访问index.html时还未创建完web服务导致访问变成404</li><li>需要确保路由配置和静态资源托管之间不干扰</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有方法</span></span><br><span class="line"><span class="keyword">let</span> getFileMime = <span class="keyword">function</span> (<span class="params">extname</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./data/mime.json&#x27;</span>); <span class="comment">//同步方法</span></span><br><span class="line">    <span class="keyword">let</span> mimeObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">    <span class="keyword">return</span> mimeObj[extname];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">static</span> = <span class="keyword">function</span> (<span class="params">req, res, staticPath</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、获取地址</span></span><br><span class="line">    <span class="keyword">let</span> pathname = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line">    <span class="keyword">let</span> extname = path.<span class="title function_">extname</span>(pathname);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (extname) &#123;  <span class="comment">//如果有后缀名让静态web处理 否则路由处理</span></span><br><span class="line">        <span class="comment">//2、通过fs模块读取文件</span></span><br><span class="line">        <span class="keyword">if</span> (pathname != <span class="string">&#x27;/favicon.ico&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./&#x27;</span> + staticPath + pathname);</span><br><span class="line">                <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                    <span class="keyword">let</span> mime = <span class="title function_">getFileMime</span>(extname);</span><br><span class="line">                    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;&#x27;</span> + mime + <span class="string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">                    res.<span class="title function_">end</span>(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">&#x27;./module/routes&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">//创建静态web服务，其中读取文件异步改1同步，保证先创建完服务后，再进行路由的配置</span></span><br><span class="line">  <span class="comment">// 否则访问index.html时候服务还没创建完，路由匹配到404</span></span><br><span class="line">  routes.<span class="title function_">static</span>(req, res, <span class="string">&#x27;static&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//路由</span></span><br><span class="line">  <span class="keyword">let</span> pathname = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line">  <span class="keyword">let</span> extname = path.<span class="title function_">extname</span>(pathname);</span><br><span class="line">  <span class="keyword">if</span> (!extname) &#123; <span class="comment">//如果有请求地址有后缀名的话让静态web服务去处理 </span></span><br><span class="line">    <span class="keyword">if</span> (pathname == <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;执行登录&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/register&#x27;</span>) &#123;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;执行注册&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/admin&#x27;</span>) &#123;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;处理后的业务逻辑&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;404&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="1-3-使用EJS模板引擎"><a href="#1-3-使用EJS模板引擎" class="headerlink" title="1.3 使用EJS模板引擎"></a>1.3 使用EJS模板引擎</h3><p>新建一个views文件夹，其中放置一个login.ejs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;ejs&lt;/h1&gt;</span><br><span class="line">  &lt;h3&gt;</span><br><span class="line">    &lt;%=msg%&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;% for(let i=0;i&lt;list.length;i++)&#123;%&gt;</span><br><span class="line">      &lt;li&gt;&lt;%=list[i].title%&gt;&lt;/li&gt;</span><br><span class="line">      &lt;%&#125; %&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>app.js中对&#x2F;login页面渲染时使用ejs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (pathname == <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">     <span class="comment">/* res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27; &#125;);</span></span><br><span class="line"><span class="comment">     res.end(&quot;执行登录&quot;); */</span></span><br><span class="line">     <span class="keyword">let</span> msg = <span class="string">&#x27;数据库数据&#x27;</span></span><br><span class="line">     <span class="keyword">let</span> list = [</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">title</span>: <span class="string">&#x27;新闻1&#x27;</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">title</span>: <span class="string">&#x27;新闻2&#x27;</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">title</span>: <span class="string">&#x27;新闻3&#x27;</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">title</span>: <span class="string">&#x27;新闻4&#x27;</span></span><br><span class="line">       &#125;,</span><br><span class="line">     ]</span><br><span class="line">     ejs.<span class="title function_">renderFile</span>(<span class="string">&#x27;./views/login.ejs&#x27;</span>,&#123;msg,list&#125;,<span class="function">(<span class="params">err, data</span>)=&gt;</span> &#123;</span><br><span class="line">       res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">       res.<span class="title function_">end</span>(data)</span><br><span class="line">     &#125; )</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-原生的get和post使用"><a href="#1-4-原生的get和post使用" class="headerlink" title="1.4 原生的get和post使用"></a>1.4 原生的get和post使用</h3><ul><li>获取get传值就是对url解析后的query属性获取，注意url.parse加一个true参数表示解析成对象</li><li>而post获取传值则是以文件流的形式的，需要以文件流的方式读取数据<ul><li>即on监听data事件不断对传来的数据拼接，后面监听end事件即数据接收完毕</li></ul></li></ul><p>form.ejs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;form action=&quot;/doLogin&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        </span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line"></span><br><span class="line">         密 码: &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">&#x27;./module/routes&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">//创建静态web服务</span></span><br><span class="line">    routes.<span class="title function_">static</span>(req, res, <span class="string">&#x27;static&#x27;</span>);</span><br><span class="line">    <span class="comment">//路由</span></span><br><span class="line">    <span class="keyword">let</span> pathname = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line">    <span class="comment">//http://127.0.0.1:3000/news?page=2&amp;id=1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求类型</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">method</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> extname = path.<span class="title function_">extname</span>(pathname);</span><br><span class="line">    <span class="keyword">if</span> (!extname) &#123;   <span class="comment">//如果有后缀名的话让静态web服务去处理 </span></span><br><span class="line">        <span class="keyword">if</span> (pathname == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//获取get传值</span></span><br><span class="line">            res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;首页&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/news&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//获取get传值</span></span><br><span class="line">            <span class="keyword">var</span> query = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>).<span class="property">query</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(query.<span class="property">page</span>);</span><br><span class="line">            res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;get传值获取成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//post演示</span></span><br><span class="line"></span><br><span class="line">            ejs.<span class="title function_">renderFile</span>(<span class="string">&quot;./views/form.ejs&quot;</span>, &#123;&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">                res.<span class="title function_">end</span>(data)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/doLogin&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//获取post传值        </span></span><br><span class="line">            <span class="keyword">let</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">                postData += chunk;</span><br><span class="line">            &#125;)</span><br><span class="line">            req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    postData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(postData)</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">                req.<span class="property">query</span> = postData</span><br><span class="line">                <span class="comment">// querystring.parse()方法用于将URL查询字符串解析为包含查询URL的键和对值的对象。</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(querystring.<span class="title function_">parse</span>(postData))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="1-5-模块化方式抽取封装前面app-js中的代码"><a href="#1-5-模块化方式抽取封装前面app-js中的代码" class="headerlink" title="1.5 模块化方式抽取封装前面app.js中的代码"></a>1.5 模块化方式抽取封装前面app.js中的代码</h3><ul><li>在routes.js中封装一个对象app，其中分别封装static创建静态web服务，以及上文的几个路由</li><li>注意这之后，<strong>app.js中需要动态的方式去调用routes.js中封装在对象里的方法：<code>routes[pathname](req, res)</code></strong></li></ul><p>routes.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有方法</span></span><br><span class="line"><span class="keyword">let</span> getFileMime = <span class="keyword">function</span> (<span class="params">extname</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./data/mime.json&#x27;</span>); <span class="comment">//同步方法</span></span><br><span class="line">  <span class="keyword">let</span> mimeObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="keyword">return</span> mimeObj[extname];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = &#123;</span><br><span class="line">  <span class="attr">static</span>: <span class="function">(<span class="params">req, res, staticPath</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1、获取地址</span></span><br><span class="line">    <span class="keyword">let</span> pathname = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line">    <span class="keyword">let</span> extname = path.<span class="title function_">extname</span>(pathname);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、通过fs模块读取文件</span></span><br><span class="line">    <span class="keyword">if</span> (pathname != <span class="string">&#x27;/favicon.ico&#x27;</span> &amp;&amp; extname) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./&#x27;</span> + staticPath + pathname);</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">          <span class="keyword">let</span> mime = <span class="title function_">getFileMime</span>(extname);</span><br><span class="line">          res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;&#x27;</span> + mime + <span class="string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">          res.<span class="title function_">end</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">login</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    ejs.<span class="title function_">renderFile</span>(<span class="string">&#x27;./views/form.ejs&#x27;</span>, &#123;&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">news</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;news&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">doLogin</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//获取post传值        </span></span><br><span class="line">    <span class="keyword">let</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">      postData += chunk;</span><br><span class="line">    &#125;)</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(postData);</span><br><span class="line">      res.<span class="title function_">end</span>(postData);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;, <span class="attr">error</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.login(&#x27;req&#x27;,&#x27;res&#x27;)</span></span><br><span class="line"><span class="comment">// app[&#x27;login&#x27;](&#x27;req&#x27;,&#x27;res&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">&#x27;./module/routes&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">//创建静态web服务</span></span><br><span class="line">    routes.<span class="title function_">static</span>(req, res, <span class="string">&#x27;static&#x27;</span>);</span><br><span class="line">    <span class="comment">//路由</span></span><br><span class="line">    <span class="keyword">let</span> pathname = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>.<span class="title function_">replace</span>(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>);      </span><br><span class="line">    <span class="comment">//http://127.0.0.1:3000/news      pathname=news  </span></span><br><span class="line">    <span class="comment">//http://127.0.0.1:3000/login      pathname=login  </span></span><br><span class="line">    <span class="comment">// http://127.0.0.1:3000/xxxx      pathname=xxxx   app.xxxx不存在 </span></span><br><span class="line">    <span class="keyword">let</span> extname = path.<span class="title function_">extname</span>(pathname);</span><br><span class="line">    <span class="keyword">if</span> (!extname) &#123;   <span class="comment">//如果有后缀名的话让静态web服务去处理 </span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            routes[pathname](req, res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            routes[<span class="string">&#x27;error&#x27;</span>](req, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="1-6-方法扩展-amp-动态注册方法"><a href="#1-6-方法扩展-amp-动态注册方法" class="headerlink" title="1.6 方法扩展&amp;动态注册方法"></a>1.6 方法扩展&amp;动态注册方法</h3><p><strong>方法扩展</strong></p><ul><li>对app赋值一个函数后，还可以对app声明get等等的新方法扩展方法，这样之后原方法还是不会被覆盖，还可以调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用app方法&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="property">get</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get方法&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="property">post</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;post方法&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="comment">// app.get();</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">app</span>(); <span class="comment">// 打印出 调用app方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------------此时app对象的结构：----------------*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">app</span>: &#123;</span><br><span class="line">    (): <span class="keyword">void</span>;</span><br><span class="line">    <span class="title function_">get</span>(): <span class="keyword">void</span>;</span><br><span class="line">    <span class="title function_">post</span>(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态注册方法</strong></p><ul><li>方法中传入一个字符串和一个回调函数，若要注册方法使之在之后可进行调用。</li><li>需要先创建一个全局对象G存储动态创建的方法，使用上面 <strong>方法扩展</strong> 的方式在G对象中进行动态创建<code>G[&#39;/login&#39;](req, res)</code>。</li><li>那么app主方法中判断方法存在，然后调用即可（<strong>使用<code>[]</code>访问成员方式调用</strong>）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">最终目标是以这样的方式配置路由：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">app.get(&quot;/&quot;, function (req, res) &#123;</span></span><br><span class="line"><span class="comment">    res.send(&#x27;hello world&#x27;)</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// global，表示全局</span></span><br><span class="line"><span class="keyword">let</span> G = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用app方法&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (G[<span class="string">&#x27;/login&#x27;</span>]) &#123;</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        G[<span class="string">&#x27;/login&#x27;</span>](req, res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params">str, cb</span>) &#123;</span><br><span class="line">    <span class="comment">// 注册方法</span></span><br><span class="line">    <span class="comment">// G[&#x27;/login&#x27;] = function (param) &#123;  &#125;</span></span><br><span class="line">    G[str] = cb</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">app.<span class="property">post</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;post方法&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行方法</span></span><br><span class="line"><span class="comment">// 相当于调用后在全局注册了一个方法</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// res.send(&#x27;执行login方法&#x27;)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行login方法&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">app</span>(<span class="string">&#x27;req&#x27;</span>,<span class="string">&#x27;res&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="1-7-仿照express封装app-get-配置路由"><a href="#1-7-仿照express封装app-get-配置路由" class="headerlink" title="1.7 仿照express封装app.get()配置路由"></a>1.7 仿照express封装app.get()配置路由</h3><p><strong>express中配置路由示例</strong></p><ul><li>接下来将按照express的get方法封装配置路由</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/login&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/doLogin&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;POST request to the homepage&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>route.js</p><ul><li>route.js中即用动态注册方法的形式对get方法传来的路径字符串和回调函数创建方法</li><li>注意createServer后要获取地址pathname，针对对应地址调用对应注册好的方法</li><li>还要对不存在页面进行404页面设置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url= <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// global，表示全局</span></span><br><span class="line"><span class="keyword">let</span> G = &#123;&#125;</span><br><span class="line">    <span class="comment">//http://127.0.0.1:3000/news</span></span><br><span class="line">    <span class="comment">//http://127.0.0.1:3000/login</span></span><br><span class="line">    <span class="comment">//http://127.0.0.1:3000/register</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// createServer后获取地址，针对对应地址调用对应注册好的方法</span></span><br><span class="line">    <span class="keyword">let</span> pathname=url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span></span><br><span class="line">    <span class="keyword">if</span> (G[pathname]) &#123;</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        G[pathname](req, res)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;页面不存在&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params">str, cb</span>) &#123;</span><br><span class="line">    <span class="comment">// 注册方法</span></span><br><span class="line">    <span class="comment">// G[&#x27;/login&#x27;] = function (param) &#123;  &#125;</span></span><br><span class="line">    G[str] = cb</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app</span><br></pre></td></tr></table></figure><p>test.js</p><ul><li>http.createServer()中直接传入app代表的route.js即可，使得浏览器每次访问地址，都会触发app方法去执行注册好的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;./module/route&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.注册web服务</span></span><br><span class="line"><span class="comment">/* http.createServer(function (request, response) &#123;</span></span><br><span class="line"><span class="comment">&#125;).listen(3000); */</span></span><br><span class="line">http.<span class="title function_">createServer</span>(app).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.配置路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;首页&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;执行登录操作&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/news&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;新闻页面&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><ul><li>此时就和express的路由配置大致相同了</li></ul></blockquote><h3 id="1-8-配置post方法"><a href="#1-8-配置post方法" class="headerlink" title="1.8 配置post方法"></a>1.8 配置post方法</h3><p>先对route.js中的逻辑封装到方法中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">server</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> G = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> app = <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="comment">// createServer后获取地址，针对对应地址调用对应注册好的方法</span></span><br><span class="line">        <span class="keyword">let</span> pathname = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span></span><br><span class="line">        <span class="keyword">if</span> (G[pathname]) &#123;</span><br><span class="line">            <span class="comment">// 执行方法</span></span><br><span class="line">            G[pathname](req, res)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;页面不存在&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    app.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params">str, cb</span>) &#123;</span><br><span class="line">        <span class="comment">// 注册方法</span></span><br><span class="line">        G[str] = cb</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">server</span>()</span><br></pre></td></tr></table></figure><p><strong>封装post方法的问题</strong></p><ul><li>首先封装的逻辑还是和get一样，传str和cb在G中注册方法，但是这里就需要对G分离成针对get存储和针对post存储了。否则两个同地址不同请求方法的方法将会覆盖</li></ul><p>route.js</p><ul><li>如下将G分为_get子对象和_post子对象，凡是get的都存储到_get，post同理。</li><li>注意后面的逻辑都要改，以及判断是否为页面不存在，需要在_get和_post子对象中判断<code>G[&#39;_&#39;+method][pathname]</code>是否创建了对应地址的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">server</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> G = &#123;&#125;</span><br><span class="line">  <span class="comment">// 把get和post分开</span></span><br><span class="line">  <span class="comment">/* let G1 = &#123;&#125;</span></span><br><span class="line"><span class="comment">  let G2 = &#123;&#125; */</span></span><br><span class="line">  G.<span class="property">_get</span> = &#123;&#125;</span><br><span class="line">  G.<span class="property">_post</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> app = <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// createServer后获取地址，针对对应地址调用对应注册好的方法</span></span><br><span class="line">    <span class="keyword">let</span> pathname = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span></span><br><span class="line">    <span class="comment">// 获取请求类型用于分开注册get和post方法</span></span><br><span class="line">    <span class="keyword">let</span> method = req.<span class="property">method</span>.<span class="title function_">toLowerCase</span>()</span><br><span class="line">    <span class="keyword">if</span> (G[<span class="string">&#x27;_&#x27;</span>+method][pathname]) &#123; <span class="comment">// 注意G分为_get和_post后这里也要改</span></span><br><span class="line">      <span class="comment">// 执行方法</span></span><br><span class="line">      <span class="keyword">if</span> (method == <span class="string">&#x27;get&#x27;</span>) &#123; <span class="comment">// get</span></span><br><span class="line">        G.<span class="property">_get</span>[pathname](req, res)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// post</span></span><br><span class="line">        <span class="comment">// 对于post，还需要获取到post的数据，挂载到req.body上</span></span><br><span class="line">        <span class="keyword">let</span> postData = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span> &#123;</span><br><span class="line">          postData+=chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span> &#123;</span><br><span class="line">          req.<span class="property">body</span> = postData <span class="comment">//扩展req对象属性进行挂载</span></span><br><span class="line">          G.<span class="property">_post</span>[pathname](req, res)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&#x27;页面不存在&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//注意这里要把get和post方法注册分开，否则同地址，后面比如post注册的方法会覆盖前面get的</span></span><br><span class="line">  app.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params">str, cb</span>) &#123;</span><br><span class="line">    <span class="comment">// 注册方法</span></span><br><span class="line">    G.<span class="property">_get</span>[str] = cb</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  app.<span class="property">post</span> = <span class="keyword">function</span> (<span class="params">str, cb</span>) &#123;</span><br><span class="line">    <span class="comment">// 注册方法</span></span><br><span class="line">    G.<span class="property">_post</span>[str] = cb</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">server</span>()</span><br></pre></td></tr></table></figure><p>test.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;./module/route&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.注册web服务</span></span><br><span class="line"><span class="comment">/* http.createServer(function (request, response) &#123;</span></span><br><span class="line"><span class="comment">&#125;).listen(3000); */</span></span><br><span class="line">http.<span class="title function_">createServer</span>(app).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.配置路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;首页&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">  <span class="comment">// res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27; &#125;);</span></span><br><span class="line">  <span class="comment">// res.end(&#x27;执行登录操作&#x27;);</span></span><br><span class="line">  ejs.<span class="title function_">renderFile</span>(<span class="string">&#x27;./views/form.ejs&#x27;</span>,&#123;&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/doLogin&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">end</span>(req.<span class="property">body</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><ul><li>测试可见，在访问&#x2F;login后，填写账号密码可显示在浏览器上</li><li>同时测试get和post的路径相同，但不会报错</li></ul></blockquote><h3 id="1-9-封装res-send-方法"><a href="#1-9-封装res-send-方法" class="headerlink" title="1.9 封装res.send()方法"></a>1.9 封装res.send()方法</h3><ul><li>首先写一个用于扩展res.send()方法的方法，然后后面createServer开始时马上调用对res挂载send方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">changeRes</span>(<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="comment">// 为res扩展一个send方法</span></span><br><span class="line">  res.<span class="property">send</span> = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">server</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> G = &#123;&#125;</span><br><span class="line">  <span class="comment">// 把get和post分开</span></span><br><span class="line">  <span class="comment">/* let G1 = &#123;&#125;</span></span><br><span class="line"><span class="comment">  let G2 = &#123;&#125; */</span></span><br><span class="line">  G.<span class="property">_get</span> = &#123;&#125;</span><br><span class="line">  G.<span class="property">_post</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> app = <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// createServer时，对res扩展send方法</span></span><br><span class="line">    <span class="title function_">changeRes</span>(res)</span><br><span class="line">    <span class="comment">// createServer后获取地址，针对对应地址调用对应注册好的方法</span></span><br><span class="line">    <span class="keyword">let</span> pathname = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-封装静态web服务"><a href="#1-10-封装静态web服务" class="headerlink" title="1.10 封装静态web服务"></a>1.10 封装静态web服务</h3><ul><li><p>创建static目录，下创建css&#x2F;style.css写入样式，启动代码后浏览器调试工具可见style.css传输失败</p></li><li><p>那么把之前的创建静态web服务相关的文件data和代码复制</p></li><li><p>G中扩展一个staticPath用于存储静态web服务的文件路径</p></li><li><p>同时也是在createServer后马上去执行创建静态web服务的逻辑</p></li><li><p>app扩展一个static方法用于重新设置staticPath路径</p></li></ul><p>route.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展res</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeRes</span>(<span class="params">res</span>) &#123;</span><br><span class="line">  res.<span class="property">send</span> = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据后缀名获取文件类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFileMime</span>(<span class="params">extname</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./data/mime.json&#x27;</span>); <span class="comment">// 这里还有硬编码的小问题不管了</span></span><br><span class="line">  <span class="keyword">let</span> mimeObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="keyword">return</span> mimeObj[extname];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态web服务的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initStatic</span>(<span class="params">req, res, staticPath</span>) &#123;</span><br><span class="line">  <span class="comment">//1、获取地址</span></span><br><span class="line">  <span class="keyword">let</span> pathname = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line">  <span class="comment">// pathname = pathname == &#x27;/&#x27; ? &#x27;/index.html&#x27; : pathname;</span></span><br><span class="line">  <span class="keyword">let</span> extname = path.<span class="title function_">extname</span>(pathname);</span><br><span class="line">  <span class="comment">//2、通过fs模块读取文件</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (extname) &#123;  <span class="comment">//如果有后缀名用静态web服务处理</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./&#x27;</span> + staticPath + pathname);</span><br><span class="line">      <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        <span class="keyword">let</span> mime = <span class="title function_">getFileMime</span>(extname);</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;&#x27;</span> + mime + <span class="string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">        res.<span class="title function_">end</span>(data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">server</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> G = &#123;</span><br><span class="line">    <span class="attr">_get</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">_post</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">// G中声明staitcPath（静态web目录）</span></span><br><span class="line">    <span class="attr">staticPath</span>: <span class="string">&#x27;static&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 把get和post分开</span></span><br><span class="line">  <span class="comment">/* let G1 = &#123;&#125;</span></span><br><span class="line"><span class="comment">  let G2 = &#123;&#125; */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> app = <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">//扩展res的方法</span></span><br><span class="line">    <span class="title function_">changeRes</span>(res);</span><br><span class="line">    <span class="comment">//配置静态web服务</span></span><br><span class="line">    <span class="title function_">initStatic</span>(req, res, G.<span class="property">staticPath</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pathname = url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line">    <span class="comment">//获取请求类型</span></span><br><span class="line">    <span class="keyword">let</span> method = req.<span class="property">method</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(method);</span><br><span class="line">    <span class="keyword">let</span> extname = path.<span class="title function_">extname</span>(pathname);</span><br><span class="line">    <span class="keyword">if</span> (!extname) &#123;  <span class="comment">//如果有后缀名用静态web处理</span></span><br><span class="line">      <span class="keyword">if</span> (G[<span class="string">&#x27;_&#x27;</span> + method][pathname]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="string">&quot;get&quot;</span>) &#123;</span><br><span class="line">          G[<span class="string">&#x27;_&#x27;</span> + method][pathname](req, res);  <span class="comment">//执行方法</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//post  获取post的数据 把它绑定到req.body</span></span><br><span class="line">          <span class="keyword">let</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">            postData += chunk;</span><br><span class="line">          &#125;)</span><br><span class="line">          req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            req.<span class="property">body</span> = postData;</span><br><span class="line">            G[<span class="string">&#x27;_&#x27;</span> + method][pathname](req, res);  <span class="comment">//执行方法</span></span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;页面不存在&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//注意这里要把get和post方法注册分开，否则同地址，后面比如post注册的方法会覆盖前面get的</span></span><br><span class="line">  app.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params">str, cb</span>) &#123;</span><br><span class="line">    <span class="comment">// 注册方法</span></span><br><span class="line">    G.<span class="property">_get</span>[str] = cb</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  app.<span class="property">post</span> = <span class="keyword">function</span> (<span class="params">str, cb</span>) &#123;</span><br><span class="line">    <span class="comment">// 注册方法</span></span><br><span class="line">    G.<span class="property">_post</span>[str] = cb</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置静态web服务路径</span></span><br><span class="line">  app.<span class="property">static</span> = <span class="function">(<span class="params">staticPath</span>) =&gt;</span> &#123;</span><br><span class="line">    G.<span class="property">staticPath</span> = staticPath</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">server</span>()</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;./module/route&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.注册web服务</span></span><br><span class="line"><span class="comment">/* http.createServer(function (request, response) &#123;</span></span><br><span class="line"><span class="comment">&#125;).listen(3000); */</span></span><br><span class="line">http.<span class="title function_">createServer</span>(app).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//一行代码配置静态web服务</span></span><br><span class="line">app.<span class="title function_">static</span>(<span class="string">&#x27;static&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.配置路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;首页&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">  <span class="comment">// res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27; &#125;);</span></span><br><span class="line">  <span class="comment">// res.end(&#x27;执行登录操作&#x27;);</span></span><br><span class="line">  ejs.<span class="title function_">renderFile</span>(<span class="string">&#x27;./views/form.ejs&#x27;</span>,&#123;&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/doLogin&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><ul><li>至此，封装一个类似express框架的项目完成</li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Nodejs简单练习，仿照express封装一个简单的框架&lt;/p&gt;</summary>
    
    
    
    <category term="Nodejs" scheme="https://setinsung.github.io/categories/nodejs/"/>
    
    
    <category term="Nodejs" scheme="https://setinsung.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>博客应该写什么呢</title>
    <link href="https://setinsung.github.io/blog/2023-03-10-journal/"/>
    <id>https://setinsung.github.io/blog/2023-03-10-journal/</id>
    <published>2023-03-09T16:29:45.000Z</published>
    <updated>2023-03-09T17:05:31.124Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到了一篇文章，讲述了博客应该要写什么</p><span id="more"></span><h4 id="博客应该写什么呢"><a href="#博客应该写什么呢" class="headerlink" title="博客应该写什么呢"></a>博客应该写什么呢</h4><p>原文地址：<a href="https://simonwillison.net/2022/Nov/6/what-to-blog-about/">What to blog about</a></p><p>这篇文章中说到了如果没有东西写，可以想一下今天学到了什么和正在做的项目。而且我觉得也完全不用勉强自己写很多字数，只需要一个行动即可。</p><p>我每天学到的东西也不多，可能不足以为了这点东西来写一个博客，但是写一下自己的某些思考应该还是不错的，一天之内随便思考点什么东西，然后随便写点什么东西，差不多了。</p><p>总之还是加油吧</p><h4 id="别的东西"><a href="#别的东西" class="headerlink" title="别的东西"></a>别的东西</h4><p>这学期又有好多麻烦的项目和任务。为什么说麻烦，因为我觉得自己的技术还只是学了点皮毛的程度，身边好多大佬对于这种项目想必是信手拈来的吧。正因为如此，还是要不断的学习和写代码才行。</p><p>首先是创新实践课，老师是网安方向的，为我们设置的方向都是网安相关，所以这学期还得学学网安，真的是从0开始学啊，不知道最后会怎么样，上学期创新实践还不是这样的</p><p>然后有一个Web应用程序设计的课，本来应该会分成.NET和Java语言两个课的，老师说由于Java版的课的一个老师因为学教评太低了，导致课开不了了，所以只有.NET开了。刚开始本来是就11个人选，后来发现另一个学院的这个课是必修，两个班凑在一起上，那就不会停课了。</p><p>其实我就是为了凑学分才选这个课的，相信很多人也是这样的。结果老师问有多少人本来要选那个没开的Java版的课的，大部分的人举手了，好像只有2个人举手本来就是选.NET。</p><p>最后就是这个课的上课方式修改了，老师说用什么语言随意，反正最后开发一个Web应用就完事了，但是还是有一些要求，现在还不太明确。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天看到了一篇文章，讲述了博客应该要写什么&lt;/p&gt;</summary>
    
    
    
    <category term="日记" scheme="https://setinsung.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="journal" scheme="https://setinsung.github.io/tags/journal/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell7的安装和简单使用</title>
    <link href="https://setinsung.github.io/blog/2023-03-09-install-powershell/"/>
    <id>https://setinsung.github.io/blog/2023-03-09-install-powershell/</id>
    <published>2023-03-08T17:05:32.000Z</published>
    <updated>2023-03-08T17:12:02.153Z</updated>
    
    <content type="html"><![CDATA[<p>针对PowerShell7的简单安装和配置</p><span id="more"></span><h1 id="PowerShell7"><a href="#PowerShell7" class="headerlink" title="PowerShell7"></a>PowerShell7</h1><h2 id="1-PowerShell简介"><a href="#1-PowerShell简介" class="headerlink" title="1.PowerShell简介"></a>1.PowerShell简介</h2><ul><li>PowerShell全称 Windows Power Shell，是一种命令行外壳程序和脚本环境，使命令行用户和脚本编写者可以利用.NET Framework的强大功能来执行一些操作</li><li>之前使用WSL时针对Windows Terminal集成的默认的PowerShell进行了配置，默认的PowerShell也叫 <strong>Windows PowerShell 5.1</strong> ，是在 <strong>.NET Framework v4.5</strong> 基础上构建的</li><li>但是现在的 <strong>PowerShell 7.x</strong> 也称为 **Powershell Core **，打开默认的PowerShell会打印微软的推荐：<ul><li>尝试新的跨平台 PowerShell <a href="https://aka.ms/pscore6">https://aka.ms/pscore6</a></li><li>听名字就知道它是基于<strong>跨平台且开源的.NET Core</strong> 构建的。因为跨平台，当然也可以在Linux上使用</li></ul></li></ul><hr><h2 id="2-安装PowerShell7"><a href="#2-安装PowerShell7" class="headerlink" title="2.安装PowerShell7"></a>2.安装PowerShell7</h2><p>现在最新的PowerShell7.3基于2022年11月8日发布的**.NET 7**，当然也可以选择下载LTS版本等</p><p><strong>安装步骤</strong></p><ul><li><p>直接去github下载并安装release：<a href="https://github.com/PowerShell/PowerShell">PowerShell&#x2F;PowerShell: PowerShell for every system! (github.com)</a></p></li><li><p>安装界面的功能都可勾上</p></li><li><p>安装完成后，Windows Terminal就会自动集成PowerShell7，有了PowerShell7，Windows Terminal就可以选择使用PowerShell7为默认启动配置了</p></li></ul><hr><h2 id="3-PowerShell的配置"><a href="#3-PowerShell的配置" class="headerlink" title="3.PowerShell的配置"></a>3.PowerShell的配置</h2><h3 id="3-1-NF字体"><a href="#3-1-NF字体" class="headerlink" title="3.1 NF字体"></a>3.1 NF字体</h3><ul><li>首先还是需要有一个NF字体，因为默认字体不支持之后要配置的部分主题格式</li><li>若之前使用Windows Terminal时已经安装了NF字体就不需要下载了，以下网站中随便选一个字体下载安装：<ul><li><a href="https://www.nerdfonts.com/">https://www.nerdfonts.com</a></li><li>然后使用管理员身份打开Windows Terminal，<code>Ctrl+ shift+,</code> 打开wt的<strong>settings.json</strong></li><li>对其中的 <strong>profiles.defaults下</strong> 添加以下字体配置，face设置的就是刚刚下载的字体名，最后保存即可</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;defaults&quot;</span><span class="punctuation">:</span> </span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> </span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;face&quot;</span><span class="punctuation">:</span> <span class="string">&quot;下载的字体名&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-安装Oh-My-Posh-和主题配置"><a href="#3-2-安装Oh-My-Posh-和主题配置" class="headerlink" title="3.2 安装Oh My Posh 和主题配置"></a>3.2 安装Oh My Posh 和主题配置</h3><ul><li><p>Oh My Posh的已经<strong>不再支持PowerShell模块</strong>，因此不能再使用以下的方式安装</p><ul><li><code>Install-Module oh-my-posh -Scope CurrentUser -SkipPublisherCheck</code></li><li>如果之前是这样安装的，需要参考Oh My Posh的迁移方案：<a href="https://ohmyposh.dev/docs/migrating">https://ohmyposh.dev/docs/migrating</a></li><li>记得要删除之前的模块：<code>Uninstall-Module oh-my-posh -AllVersions</code></li></ul></li><li><p>以下使用winget方式安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winget install oh-my-posh</span><br></pre></td></tr></table></figure><ul><li>然后输入<code>notepad $PROFILE</code>打开PowerShell的配置文件，添加如下命令。重启后即可成功配置Oh My Posh<ul><li>可在Oh My Posh的官方文档中选择主题：<a href="https://ohmyposh.dev/docs/themes">https://ohmyposh.dev/docs/themes</a></li><li>更换主题只需修改<code>xxxx.omp.json</code>即可</li><li>退出后重新进入，可见配置生效</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config <span class="string">&quot;<span class="variable">$env</span>:POSH_THEMES_PATH\jandedobbeleer.omp.json&quot;</span> | Invoke-Expression</span><br></pre></td></tr></table></figure><h3 id="3-3-模块安装"><a href="#3-3-模块安装" class="headerlink" title="3.3 模块安装"></a>3.3 模块安装</h3><ul><li>首先安装PSReadLine，用于命令自动提示</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module -Name PSReadLine -AllowPrerelease -Scope CurrentUser -Force -SkipPublisherCheck</span><br></pre></td></tr></table></figure><ul><li>然后安装文件图标库，显示文件时可显示文件的颜色以及图标</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module -Name Terminal-Icons -Repository PSGallery</span><br></pre></td></tr></table></figure><ul><li>接下来就要在PowerShell的启动前参数中配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config <span class="string">&quot;<span class="variable">$env</span>:POSH_THEMES_PATH\jandedobbeleer.omp.json&quot;</span> | Invoke-Expression</span><br><span class="line"><span class="comment"># 导入文件图标模块</span></span><br><span class="line">Import-Module -Name Terminal-Icons</span><br><span class="line"><span class="comment"># 命令行提示Tab选择功能</span></span><br><span class="line">Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete</span><br></pre></td></tr></table></figure><ul><li>此时即配置完成</li></ul><blockquote><ul><li>如果觉得打开速度慢，可以不导入文件图标模块</li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;针对PowerShell7的简单安装和配置&lt;/p&gt;</summary>
    
    
    
    <category term="PowerShell" scheme="https://setinsung.github.io/categories/powershell/"/>
    
    
    <category term="PowerShell" scheme="https://setinsung.github.io/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>整理书签</title>
    <link href="https://setinsung.github.io/blog/2023-03-07-journal/"/>
    <id>https://setinsung.github.io/blog/2023-03-07-journal/</id>
    <published>2023-03-06T17:16:45.000Z</published>
    <updated>2023-03-06T17:21:06.810Z</updated>
    
    <content type="html"><![CDATA[<p>整理书签的思考</p><span id="more"></span><h4 id="整理书签"><a href="#整理书签" class="headerlink" title="整理书签"></a>整理书签</h4><p>浏览器书签断断续续存了好多了，可能达到上千个了，以前的存放方式感觉不太行，所以要整理，然而整理就要花费很多时间了。</p><p>就是因为一开始如果没有做好书签的存放位置和层次，后面就得一个一个看过来，导致这个麻烦的发生。不过还有原因应该是平时保存的一些文章类型的书签没有及时消化掉，而是直接丢到了书签文件夹里去。</p><p>这个问题在b站视频的收藏中也存在，很多人说“收藏从未停止，学习从未开始”，一个视频觉得不错就把它收藏了但是没有去看，那和没有收藏没啥区别。我以前也是收藏了很多的b站视频，后来意识到了这个问题。</p><p>现在的做法就是遇到一个好的视频，但是当前没有时间去看，就可以直接添加到稍后观看里去，这样我就会经常想起来去看完这个视频，所以现在收藏视频变得越来越少了。</p><p>不过还是难免会遇到稍后观看也吃灰的问题。我觉得这个问题的底层可能跟拖延症有关，我自己也是喜欢拖延的人，这个习惯真的不好，会导致很多应该要做的事没有及时完成，然后导致后续要做的事不断错位。</p><p>这个要想改正也只能看自己了。整理书签也不能马上整理完，需要每天持续一点点地整理了。</p><p>有一个插件或许有点作用，这个插件能间隔一段时间随机找一个书签然后提示出来，让我对它进行处理。可能对整理书签有些帮助</p><ul><li><a href="https://microsoftedge.microsoft.com/addons/detail/%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0/pibjmfgfgamgohlaehhhbdkjboaopjkj">温故知新 - Microsoft Edge Addons</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理书签的思考&lt;/p&gt;</summary>
    
    
    
    <category term="日记" scheme="https://setinsung.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="journal" scheme="https://setinsung.github.io/tags/journal/"/>
    
  </entry>
  
  <entry>
    <title>时间消耗、一周结束</title>
    <link href="https://setinsung.github.io/blog/2023-03-06-journal/"/>
    <id>https://setinsung.github.io/blog/2023-03-06-journal/</id>
    <published>2023-03-05T17:42:52.000Z</published>
    <updated>2023-03-06T16:23:24.573Z</updated>
    
    <content type="html"><![CDATA[<p>对于时间的消耗，以及上课一周结束的思考</p><span id="more"></span><h4 id="时间消耗"><a href="#时间消耗" class="headerlink" title="时间消耗"></a>时间消耗</h4><p>这个周末，说实话，摆烂了好多，然后又在折腾各种乱七八糟的东西，时间花费了很多。其实我觉得，折腾东西是挺有意思的，但是可能是有一个曲线在，后面如果一直没办法解决问题，就会感觉无聊，想放弃了。唉，自己解决问题的速度还是太慢了，也是自己太菜的原因吧，还是得更多的学习才行。</p><p>对于学校课程，我的计划是还要去学一些东西的，但是其实寒假以及返校考试的时间段时就摆烂了，看来我真的是一个喜欢浪费时间的人。而且，看到很多人能充分利用好碎片时间，我就发现了自己没有这个能力，有时候就是一小段时间，觉得反正就那么点时间，干脆就休息吧！于是就休息了。</p><p>然后还有一个就是晚上熬夜，我基本上都是1点后睡觉了，这个只能说可能是因为事情太多，或者有什么事没做完，就顺带熬夜了。熬夜确实不太好，希望以后能早点睡觉吧。</p><h4 id="一周结束"><a href="#一周结束" class="headerlink" title="一周结束"></a>一周结束</h4><p>上课一周结束了，这周因为是第一周还不知道后面的险恶吧，还算轻松，也许比上学期会轻松点。这周完成的事不算多，代码也没怎么写。下周加油了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于时间的消耗，以及上课一周结束的思考&lt;/p&gt;</summary>
    
    
    
    <category term="日记" scheme="https://setinsung.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="journal" scheme="https://setinsung.github.io/tags/journal/"/>
    
  </entry>
  
  <entry>
    <title>WSL的安装和简单使用</title>
    <link href="https://setinsung.github.io/blog/2023-03-05-install-and-simple-use--WSL/"/>
    <id>https://setinsung.github.io/blog/2023-03-05-install-and-simple-use--WSL/</id>
    <published>2023-03-04T18:15:53.000Z</published>
    <updated>2023-03-07T14:55:30.396Z</updated>
    
    <content type="html"><![CDATA[<p>基于b站和各个网上教程的WSL安装使用简单记录</p><span id="more"></span><h1 id="WSL的安装和简单使用"><a href="#WSL的安装和简单使用" class="headerlink" title="WSL的安装和简单使用"></a>WSL的安装和简单使用</h1><blockquote><ul><li>可直接查阅微软官方文档：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">安装 WSL | Microsoft Learn</a></li></ul></blockquote><h2 id="1-安装WSL"><a href="#1-安装WSL" class="headerlink" title="1.安装WSL"></a>1.安装WSL</h2><h3 id="1-1-前置条件和说明"><a href="#1-1-前置条件和说明" class="headerlink" title="1.1 前置条件和说明"></a>1.1 前置条件和说明</h3><ul><li><p>首先要确保电脑的CPU<strong>开启了虚拟化</strong></p></li><li><p>同时需要win10版本为 <code>1903 或更高版本，内部版本为 18362 或更高版本</code></p></li><li><p>以下要安装的是<strong>WSL2</strong>，并且不是安装预览版的方式，而是旧版的<strong>进行手动的安装</strong></p><ul><li><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual">旧版 WSL 的手动安装步骤 | Microsoft Learn</a></li></ul></li></ul><hr><h3 id="1-2-安装步骤和查看"><a href="#1-2-安装步骤和查看" class="headerlink" title="1.2 安装步骤和查看"></a>1.2 安装步骤和查看</h3><p><strong>安装步骤</strong></p><ul><li>打开powershell， <strong>启用“适用于 Linux 的 Windows 子系统”可选功能</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows-Subsystem-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure><ul><li>同时 <strong>启用“虚拟机平台”可选功能</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><ul><li><p>然后<strong>重启电脑</strong></p></li><li><p>下载并安装 <strong>Linux 内核更新包</strong>： <a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">WSL2 Linux Kernel update package for x64 machines</a></p></li><li><p>接下来运行以下命令，将 <strong>WSL 2 设置为默认版本</strong></p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>安装Linux发行版</strong>，直接在Microsoft Store中搜索WSL即可找到几个Linux发行版，此处安装的是<strong>ubuntu20.04</strong>，直接点击安装即可。</p></li><li><p>打开刚刚安装的ubuntu，因为是第一次安装，会需要进行一些初始设置。</p><ul><li>需要输入用户名和密码</li></ul></li><li><p>至此即安装完成，可以直接点击ubuntu图标进行使用</p></li></ul><p><strong>查看安装完成后的系统</strong></p><ul><li><p>输入screenfetch即可查看到Linux版本</p></li><li><p>同时这个ubuntu已经预装了git和python等等，均可查看</p></li><li><p>在powershell中，通过命令：wsl -l -v，可以查看子系统的运行状态。</p></li></ul><hr><h2 id="2-使用Windows-Terminal"><a href="#2-使用Windows-Terminal" class="headerlink" title="2.使用Windows Terminal"></a>2.使用Windows Terminal</h2><h3 id="2-1-Windows-Terminal安装"><a href="#2-1-Windows-Terminal安装" class="headerlink" title="2.1 Windows Terminal安装"></a>2.1 Windows Terminal安装</h3><p>Windows Terminal是一个比较好用的终端工具，可以集成powershell、cmd、wsl等</p><ul><li>在Microsoft Store中直接搜索Windows Terminal，即可下载安装</li><li>可见可直接在其中打开wsl</li></ul><img src="https://i.imgtg.com/2023/03/05/YkDFx.jpg" alt="YkDFx.jpg" style="zoom: 67%;" /><hr><h3 id="2-2-Windows-Terminal的美化"><a href="#2-2-Windows-Terminal的美化" class="headerlink" title="2.2 Windows Terminal的美化"></a>2.2 Windows Terminal的美化</h3><ul><li>首先直接在Microsoft Store搜索 on-my-posh下载并安装</li></ul><p><strong>设置字体</strong></p><ul><li>下载一个<strong>Nerd Font字体</strong>并安装：<a href="https://www.nerdfonts.com/">https://www.nerdfonts.com</a></li><li>然后使用管理员身份打开Windows Terminal，<code>Ctrl+ shift+,</code> 打开wt的<strong>settings.json</strong></li><li>对其中的 <strong>profiles.defaults下</strong> 添加以下字体配置，face设置的就是刚刚下载的字体名，最后保存</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;defaults&quot;</span><span class="punctuation">:</span> </span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> </span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;face&quot;</span><span class="punctuation">:</span> <span class="string">&quot;下载的字体名&quot;</span></span><br></pre></td></tr></table></figure><p><strong>配置主题</strong></p><ul><li>直接中wt中输入以下命令打开<strong>powershell配置文件</strong><ul><li>如果找不到配置文件，直接按照<code>$PROFILE</code>输出的路径和文件名，新建一个即可。</li><li>一般powershell的配置文件在用户的文档目录下的\WindowsPowerShell文件夹下</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure><ul><li>在打开的文件中写入以下代码，然后保存退出</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config <span class="string">&quot;<span class="variable">$env</span>:POSH_THEMES_PATH\json.omp.json&quot;</span> | Invoke-Expression </span><br></pre></td></tr></table></figure><ul><li>然后wt中输入下面的命令，使配置生效。至此主题配置完成</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure><ul><li>当然也可以修改主题，通过以下命令可找到各种主题，复制想要更换的主题名，重新打开powershell配置文件修改<code>xxx.omp.json</code>，xxx就是新的主题名，然后保存退出重复上一个步骤并重启即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-PoshThemes</span><br></pre></td></tr></table></figure><hr><h2 id="3-为WSL配置zsh"><a href="#3-为WSL配置zsh" class="headerlink" title="3.为WSL配置zsh"></a>3.为WSL配置zsh</h2><p>相比于默认的 Bash，zsh 有更多的自定义选项；然后oh-my-zsh是一个流行的 zsh 配置，可以自动配置zsh</p><ul><li>首先安装zsh</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh</span><br></pre></td></tr></table></figure><ul><li>安装ohmyzsh，根据提示安装即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>如果无法访问到github，可进行如下操作：</li><li>在 <a href="https://site.ip138.com/raw.Githubusercontent.com/%E8%BE%93%E5%85%A5raw.githubusercontent.com%E6%9F%A5%E8%AF%A2IP%E5%9C%B0%E5%9D%80">https://site.ip138.com/raw.Githubusercontent.com/输入raw.githubusercontent.com查询IP地址</a></li><li>然后使用<code>code /etc/hosts</code> 修改hosts，添加刚刚的ip映射</li></ul></blockquote><ul><li><p>使用<code>ls -la</code>可见zsh的配置文件.zshrc，可对zsh配置插件和主题，可查看ohmyzsh的wiki进行配置</p></li><li><p>比如以下安装一个ash-autosuggestions，cd进入.oh-my-zsh的plugin文件夹直接<code>git clone</code>对应的仓库即可</p></li><li><p>然后对 .zshrc修改，增加插件的名称即可</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">git</span><br><span class="line">zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><ul><li>这个插件可以根据历史记录和完成提示键入的命令</li></ul></blockquote><ul><li>实现效果：</li></ul><img src="https://i.imgtg.com/2023/03/05/YxK3r.jpg" alt="YxK3r.jpg" style="zoom:50%;" /><hr><h2 id="4-使用VSCode配合WSL编写代码"><a href="#4-使用VSCode配合WSL编写代码" class="headerlink" title="4.使用VSCode配合WSL编写代码"></a>4.使用VSCode配合WSL编写代码</h2><ul><li><p>打开vscode后，可见其自动提示<strong>安装WSL相关插件</strong>，直接安装：<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack">Remote Development</a></p></li><li><p>在wt的wsl中创建一个目录，然后cd进入此目录</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> WSLCodeDemo</span><br><span class="line"><span class="built_in">cd</span> WSLCodeDemo</span><br></pre></td></tr></table></figure><ul><li>此时使用以下命令试图通过vscode打开目录，可见其会<strong>自动安装 VS Code Server</strong>。接下来vscode就成功打开此目录了</li><li>同时安装插件后，可在远程资源管理器中直接打开WSL的文件目录，可以直接下载和上传文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><img src="https://i.imgtg.com/2023/03/05/YkL9p.jpg" alt="YkL9p.jpg" style="zoom:50%;" /><ul><li>此时，在vscode中新建文件，就是在WSL中新建文件。即此时可<strong>在windows中通过vscode编辑和处理WSL内部的文件了</strong>。因为WSL默认安装了Python3，以下模拟编写Python</li><li>此时新建一个test.py，vscode会提示安装python插件，并<strong>在WSL上启用插件</strong>。此时写入简单程序<ul><li>注意这里运行的vscode的插件分为本地和远程插件，可以在WSL上安装插件</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>然后vscode中直接运行程序，可见在wsl中成功输出了Hello world!</li></ul><img src="https://i.imgtg.com/2023/03/05/YkHPj.jpg" alt="YkHPj.jpg" style="zoom:50%;" /><blockquote><ul><li>此时，就实现了在Windows中编写代码，而在Linux中直接运行的效果</li></ul></blockquote><hr><h2 id="5-文件的互相访问"><a href="#5-文件的互相访问" class="headerlink" title="5.文件的互相访问"></a>5.文件的互相访问</h2><h3 id="5-1-Windows访问WSL中的文件"><a href="#5-1-Windows访问WSL中的文件" class="headerlink" title="5.1 Windows访问WSL中的文件"></a>5.1 Windows访问WSL中的文件</h3><p><strong>①使用vscode访问WSL中的文件</strong></p><ul><li>还是使用<strong>code</strong>命令，比如在WSL的根目录中输入命令，即可在vscode中查看到WSL根目录下的所有文件</li><li>同时vscode的<strong>远程资源管理器</strong>也可打开并访问文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><p><strong>②使用Windows的资源管理器</strong></p><ul><li>可直接在<strong>我的电脑</strong>中查看并打开WSL的文件目录进行访问</li></ul><img src="https://i.imgtg.com/2023/03/06/Yiyw6.jpg" alt="Yiyw6.jpg" style="zoom:67%;" /><ul><li>同时也可以直接在WSL中<strong>输入命令使用资源管理器</strong>打开当前的目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explorer.exe .</span><br></pre></td></tr></table></figure><img src="https://i.imgtg.com/2023/03/06/Yiv0F.jpg" alt="Yiv0F.jpg" style="zoom: 50%;" /><p><strong>③使用SSH连接</strong></p><ul><li>这和Linux中安装ssh服务，然后进行连接类似了</li></ul><hr><h3 id="5-2-WSL访问Windows的文件"><a href="#5-2-WSL访问Windows的文件" class="headerlink" title="5.2 WSL访问Windows的文件"></a>5.2 WSL访问Windows的文件</h3><ul><li>在WSL根目录下有一个<strong>mnt目录</strong>，进入此处可看到windows的每个盘了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /mnt/c</span><br><span class="line">cd /mnt/d</span><br><span class="line">cd /mnt/e</span><br></pre></td></tr></table></figure><ul><li>此时可见windows中的文件，可用命令进行操作</li></ul><hr><h2 id="6-WSLg"><a href="#6-WSLg" class="headerlink" title="6.WSLg"></a>6.WSLg</h2><blockquote><ul><li>全称<em>Windows Subsystem for Linux GUI</em></li></ul></blockquote><ul><li>WSLg是图形化的WSL，能够完成Ubuntu一小部分的图形显示，即<strong>可以运行WSL中的GUI程序</strong>，比如gedit</li><li>WSLg本来只在win11上支持，但是<strong>win10的22H2版本</strong>也支持WSLg</li></ul><p>如下打开gedit：</p><img src="https://i.imgtg.com/2023/03/07/YJEcC.jpg" alt="YJEcC.jpg" style="zoom:50%;" /><p><strong>安装步骤</strong></p><ul><li>如果电脑是win11，或者是win10 22H2版本，可以使用。win10低版本首先需要更新系统<strong>升级到22H2</strong></li><li>然后<strong>更新WSL</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --update</span><br></pre></td></tr></table></figure><ul><li>更新完成后<strong>检查WSL的版本</strong>，能够正常显示，说明安装成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --version</span><br></pre></td></tr></table></figure><blockquote><ul><li>显示结果：<ul><li>WSL 版本： 1.1.3.0</li><li>内核版本： 5.15.90.1</li><li>WSLg 版本： 1.0.49</li></ul></li></ul></blockquote><ul><li>那么此时就可以愉快地使用WSLg了</li><li>比如安装gedit并使用gedit命令使用，安装后同时也可直接在windows开始目录下找到安装在WSL中的程序，点击也可直接运行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gedit -y</span><br><span class="line"></span><br><span class="line">gedit</span><br></pre></td></tr></table></figure><ul><li>总的来说，有了WSLg后，WSL就更好用了，用起来的感觉挺神奇</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;基于b站和各个网上教程的WSL安装使用简单记录&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://setinsung.github.io/categories/linux/"/>
    
    
    <category term="vscode" scheme="https://setinsung.github.io/tags/vscode/"/>
    
    <category term="Linux" scheme="https://setinsung.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>使用vscode编写C#代码</title>
    <link href="https://setinsung.github.io/blog/2023-03-03-write-csharp-with-vscode/"/>
    <id>https://setinsung.github.io/blog/2023-03-03-write-csharp-with-vscode/</id>
    <published>2023-03-02T17:33:12.000Z</published>
    <updated>2023-03-04T18:13:13.097Z</updated>
    
    <content type="html"><![CDATA[<p>针对vscode如何编写C#代码进行了简单配置</p><span id="more"></span><h1 id="使用vscode编写C-代码"><a href="#使用vscode编写C-代码" class="headerlink" title="使用vscode编写C#代码"></a>使用vscode编写C#代码</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><ul><li>在cmd或powershell中输入以下命令可查看电脑是否安装了.NET的相关SDK，以及查看版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet --info</span><br></pre></td></tr></table></figure><blockquote><ul><li>目前最新.NET版本是7</li></ul></blockquote><ul><li><p>如果没有，则去微软官网进行下载并安装：<a href="https://dotnet.microsoft.com/zh-cn/download">下载 .NET(Linux、macOS 和 Windows) (microsoft.com)</a></p><ul><li>安装步骤是无脑下一步</li></ul></li><li><p>此时再输入上述命令，成功查看到.NET版本，即安装成功</p></li></ul><hr><h2 id="2-vscode插件安装"><a href="#2-vscode插件安装" class="headerlink" title="2.vscode插件安装"></a>2.vscode插件安装</h2><p>1、<a href="https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp">C#</a></p><ul><li>装这个就能做大部分事了</li></ul><p>2、<a href="https://marketplace.visualstudio.com/items?itemName=fernandoescolar.vscode-solution-explorer">vscode-solution-explorer</a></p><ul><li>可自动生成解决方案和项目，不用输命令</li></ul><p>3、<a href="https://marketplace.visualstudio.com/items?itemName=k--kato.docomment">C# XML Documentation</a></p><ul><li>用于&#x2F;&#x2F;&#x2F;自动生成文档注释</li></ul><p>4、<a href="https://marketplace.visualstudio.com/items?itemName=adrianwilczynski.add-reference">.NET Core Add Reference</a></p><ul><li>用于在项目上直接右键添加引用</li></ul><p>5、<a href="https://marketplace.visualstudio.com/items?itemName=RafisTatar.addlocalnetreferences">Add Local .Net Reference</a></p><ul><li>用于添加本地程序集引用</li></ul><p>6、<a href="https://marketplace.visualstudio.com/items?itemName=adrianwilczynski.asp-net-core-switcher">ASP.NET Core Switcher</a></p><ul><li>MVC项目时，可直接在视图和控制器之间切换</li></ul><p>7、<a href="https://marketplace.visualstudio.com/items?itemName=kreativ-software.csharpextensions">C# Extensions</a></p><ul><li>用于右键自动添加C#类、接口、MVCController等</li></ul><blockquote><ul><li>以上插件基本够用了，别的之后按需获取即可</li></ul></blockquote><hr><h2 id="3-创建一个项目"><a href="#3-创建一个项目" class="headerlink" title="3.创建一个项目"></a>3.创建一个项目</h2><ul><li>首先在Solution Explorer中选择Create New Solution，然后输入FirstDemo。可见创建了sln解决方案文件</li></ul><img src="https://i.imgtg.com/2023/03/03/VGN4L.jpg" alt="VGN4L.jpg" style="zoom: 50%;" /><ul><li>然后在Solution Explorer中对解决方案右键——Add New Project，即可为当前解决方案添加项目</li><li>这里选择控制台应用程序，语言选择C#，然后对项目的命名，可以和解决方案同名，回车即可创建成功</li></ul><img src="https://i.imgtg.com/2023/03/03/VGnCN.jpg" alt="VGnCN.jpg" style="zoom:50%;" /><ul><li>打开项目下的Program.cs文件，vscode右下角会弹出创建launch和tasks文件的选项，点击yes即可。如果不创建将无法调试</li></ul><img src="https://i.imgtg.com/2023/03/03/VG7iC.jpg" alt="VG7iC.jpg" style="zoom:50%;" /><ul><li>此时生成的Program.cs如下，这是C#使用了顶级语句</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// See https://aka.ms/new-console-template for more information</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>不用顶级语句将会创建如下</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">FirstDemo</span> <span class="comment">// Note: actual namespace depends on the project name.</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>点击调试，即可成功运行输出“Hello World!”，说明成功</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;针对vscode如何编写C#代码进行了简单配置&lt;/p&gt;</summary>
    
    
    
    <category term="DOTNET" scheme="https://setinsung.github.io/categories/dotnet/"/>
    
    
    <category term="C#" scheme="https://setinsung.github.io/tags/c/"/>
    
    <category term="vscode" scheme="https://setinsung.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>C#基础语法速成</title>
    <link href="https://setinsung.github.io/blog/2023-03-02-CSharp-Basic-Grammar/"/>
    <id>https://setinsung.github.io/blog/2023-03-02-CSharp-Basic-Grammar/</id>
    <published>2023-03-01T16:52:27.000Z</published>
    <updated>2023-03-05T02:41:08.284Z</updated>
    
    <content type="html"><![CDATA[<p>这学期突然要学C#，那就学吧。以下笔记仅作自用</p><span id="more"></span><h1 id="C-基础语法速成"><a href="#C-基础语法速成" class="headerlink" title="C#基础语法速成"></a>C#基础语法速成</h1><h2 id="1-C-基本认识和特点"><a href="#1-C-基本认识和特点" class="headerlink" title="1.C#基本认识和特点"></a>1.C#基本认识和特点</h2><ul><li>C#是微软公司发布的一种面向对象的、运行于 <strong>.NET Framework</strong> 和 <strong>.NET Core</strong> (完全开源，跨平台）之上的高级程序设计语言。</li><li>C#是一种安全的、稳定的、简单的、优雅的，由C和C++衍生出来的面向对象的编程语言。它在继承C和C++强大功能的同时去掉了一些它们的复杂特性。</li><li>C#是面向对象的编程语言。</li></ul><blockquote><ul><li>C#可以用指针，但是不推荐也少用了</li></ul></blockquote><p><strong>.NET和C#关系</strong></p><ul><li><strong>.NET是C#运行环境</strong>，C#是开发语言， C# 可以编写在.NET 中运行的应用程序。</li><li><strong>.NET公共语言运行时 (CLR)</strong> 是生成所有.NET 应用的基础，这个运行时还支持多种语言，有 C#、F# 和 Visual Basic 语言，但是C#算是主角</li></ul><hr><h2 id="2-Visual-Studio的安装和使用"><a href="#2-Visual-Studio的安装和使用" class="headerlink" title="2.Visual Studio的安装和使用"></a>2.Visual Studio的安装和使用</h2><ul><li><p>Microsoft Visual Studio（简称VS)是美国微软公司的开发工具包系列产品VS是一个基本完整的开发工具集，是编写C＃程序或者说NET程序最常用的开发工具。</p></li><li><p>下载vs网址：<a href="https://visualstudio.microsoft.com/zh-hans/downloads/">https://visualstudio.microsoft.com/zh-hans/downloads/</a></p></li><li><p>vsi工作负载，根据自己的情况选择需要的安装模块，一般选择：ASP.NET和Web开发、.NET桌面开发、通用Windows平台开发、数据库存储和处理、Visual  Studio扩展开发、.NET Core跨平台开发</p></li></ul><hr><h3 id="2-1-开始第一个项目"><a href="#2-1-开始第一个项目" class="headerlink" title="2.1 开始第一个项目"></a>2.1 开始第一个项目</h3><ul><li>就不创建控制台程序了，直接创建一个windows窗体应用，就不搞控制台应用了</li><li>选择C#、Windows、桌面，找到 WPF 应用(.NET Framwork)</li></ul><p><img src="https://i.imgtg.com/2023/03/02/VJyqq.jpg" alt="VJyqq.jpg"></p><hr><h3 id="2-2-VS的结构"><a href="#2-2-VS的结构" class="headerlink" title="2.2 VS的结构"></a>2.2 VS的结构</h3><ul><li>一般习惯工具箱和解决方案资源管理器放在左边</li><li>别的好像也没啥了，随意了</li></ul><hr><h2 id="3-cs文件结构"><a href="#3-cs文件结构" class="headerlink" title="3.cs文件结构"></a>3.cs文件结构</h2><p><img src="https://i.imgtg.com/2023/03/02/VJgrc.jpg" alt="VJgrc.jpg"></p><p><strong>上面程序的各个部分：</strong></p><ul><li><strong>using System</strong>： <strong>using 关键字</strong>：<strong>用于在程序中包含System命名空间</strong>。<strong>一个程序一般有多个using语句</strong>。</li><li><strong>namespace声明</strong>：<strong>一个namespace是一系列的类</strong>。WebApplication1命名空间 包含了类Program。</li><li><strong>class声明</strong>：<strong>类</strong>Program<strong>包含了程序使用的数据和方法声明</strong>。类一般包含多个方法，方法定义了类的行为。<strong>类只有一个Main方法</strong>。</li><li><strong>Main方法</strong>：是所有<strong>C#程序的入口点</strong>。Main方法说明当执行时类将做什么动作。</li><li>Main方法通过方法体中的语句指定它的行为。</li></ul><p><strong>以下几点值得注意</strong>：</p><ul><li>一个cs文件的结构大约是由以上几个部分组成，但是根据不同的需求和作用，<strong>会有不同的内容</strong></li><li>程序的<strong>执行从Main方法开始</strong></li></ul><hr><h2 id="4-C-基本语法"><a href="#4-C-基本语法" class="headerlink" title="4.C#基本语法"></a>4.C#基本语法</h2><ul><li><p>C#是一种<strong>面向对象</strong>的编程语言。在面向对象的程序设计方法中，程序由各种对象组成。相同种类的对象通常具有相同的类型。</p></li><li><p>C#是<strong>大小写敏感</strong>的</p></li><li><p>所有的语句和表达式必须<strong>以分号 <code>;</code> 结尾</strong></p></li><li><p>与Java不同的是，<strong>文件名可以不同于类的名称</strong></p></li></ul><h3 id="4-1-关键字"><a href="#4-1-关键字" class="headerlink" title="4.1 关键字"></a>4.1 关键字</h3><p>关键字，是<strong>对编译器有特殊意义</strong>的<strong>预定义保留标示符</strong>，它们<strong>不能在程序中用作标示符</strong></p><p><strong>using关键字</strong></p><ul><li>using关键字<strong>用于在程序中包含命名空间</strong>。一个程序可以包含多个using语句。</li><li>在任何C＃程序中的第一条语句都是：</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br></pre></td></tr></table></figure><p><strong>class关键字</strong></p><ul><li>class关键字用于声明一个类。</li></ul><hr><h3 id="4-2-注释"><a href="#4-2-注释" class="headerlink" title="4.2 注释"></a>4.2 注释</h3><ul><li><strong>块注释</strong></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这个程序演示</span></span><br><span class="line"><span class="comment">C#语言的多行注释</span></span><br><span class="line"><span class="comment">语法*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>单行注释</strong>是用<code>//</code>符号表示。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test</span></span><br></pre></td></tr></table></figure><ul><li><strong>文档注释</strong>用<code>///</code>符号表示<ul><li>应用场合：<strong>声明的方法、类上</strong></li></ul></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 这是主程序入口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;args&quot;&gt;</span>需要传入的参数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释的作用：</p><ul><li><p>解释：说明代码作用</p></li><li><p>注销：将暂时不需要的代码注销</p></li></ul><p>总结：</p><ul><li>不写注释是流氓</li><li>名字瞎起是扯淡</li><li>相比注销，注释意义更大</li><li>要做到别人一看就能看懂</li></ul><hr><h3 id="4-3-变量"><a href="#4-3-变量" class="headerlink" title="4.3 变量"></a>4.3 变量</h3><ul><li>在C#中，每个变量都有一个特定的类型，不同类型的变量其内存大小也不尽相同。</li></ul><p><strong>C#的基本类型：</strong></p><table><thead><tr><th>类型</th><th>举例</th></tr></thead><tbody><tr><td>整数类型</td><td><strong>byte</strong>(0-255)、<strong>short</strong>(-32768-32767)、<strong>int</strong>(-2*10^9-2*10^9)、<strong>long</strong></td></tr><tr><td>浮点型</td><td><strong>float</strong>、<strong>double</strong></td></tr><tr><td>十进制类型</td><td><strong>decimal</strong></td></tr><tr><td>布尔类型</td><td><strong>bool</strong></td></tr><tr><td>字符类型</td><td><strong>string</strong>、<strong>char</strong></td></tr><tr><td>空类型</td><td><strong>null</strong></td></tr></tbody></table><blockquote><ul><li>float浮点类型，小数后需带f&#x2F;F</li><li>decimal相当于精度更大的浮点型，但会有更多的性能损耗</li><li>浮点型之间的转换只有float转换为double一种，decimal无法直接转换到浮点型</li></ul></blockquote><hr><h2 id="5-C-语法进阶"><a href="#5-C-语法进阶" class="headerlink" title="5.C#语法进阶"></a>5.C#语法进阶</h2><h3 id="5-1-表达式"><a href="#5-1-表达式" class="headerlink" title="5.1 表达式"></a>5.1 表达式</h3><ul><li><p>表达式由<strong>操作数</strong>(operand)和<strong>运算符</strong>(operator)构成。运算符的示例包括 <code>＋</code>、<code>-</code> 、<code>*</code>、<code>／</code> 和 <code>new</code>。操作数的示例包括<strong>文本</strong>、<strong>字段</strong>、<strong>局部变量</strong>和<strong>表达式</strong>。</p></li><li><p>当表达式包含多个运算符时，运算符的<strong>优先级</strong>(precedence)控制各运算符的计算顺序。例如，表达式x+y*z按x + (y * z)计算，因为＊运算符的优先级高于＋运算符。</p></li><li><p>（了解）大多数运算符都可以<strong>重载</strong>(overload,)。运算符重载允许指定用户定义的运算符实现来执行运算这些运算的操作数中至少有一个，甚至所有操作数都属于用户定义的类类型或结构类型。</p></li><li><p>下表总结了C#简单常用的运算符，并按优先级从高到低的顺序列出各运算符类别。同一类别中的 运算符优先级相同。</p></li></ul><table><thead><tr><th>类别</th><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td><strong>基本</strong></td><td>x.m</td><td>成员访问</td></tr><tr><td></td><td>x(…)</td><td>方法和委托调用</td></tr><tr><td></td><td>x[…]</td><td>数组和索引器访问</td></tr><tr><td></td><td>new T(…)</td><td>对象和委托创建</td></tr><tr><td></td><td>new T(…){…}</td><td>使用初始值设定项创建对象</td></tr><tr><td></td><td>new {…}</td><td>匿名对象初始值设定项</td></tr><tr><td></td><td>new T[…]</td><td>数组创建</td></tr></tbody></table><table><thead><tr><th>类别</th><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td><strong>一元</strong></td><td>+x</td><td>恒等</td></tr><tr><td></td><td>-x</td><td>求相反数</td></tr><tr><td></td><td>!x</td><td>逻辑求反</td></tr><tr><td></td><td>~x</td><td>按位求反</td></tr><tr><td></td><td>++x</td><td>前增量</td></tr><tr><td></td><td>–x</td><td>前减量</td></tr><tr><td></td><td>x++</td><td>后增量</td></tr><tr><td></td><td>x–</td><td>后减量</td></tr><tr><td></td><td>(T)x</td><td>将x显式转换为类型T</td></tr></tbody></table><table><thead><tr><th>类别</th><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td><strong>二元</strong></td><td>x*y、x&#x2F;y、x%y、x+y、x-y</td><td>乘除余加减（加号还有字符串串联）</td></tr><tr><td></td><td>x&lt;&lt;y、x&gt;&gt;y</td><td>位左移、位右移</td></tr><tr><td></td><td>x&lt;y、x&gt;y、x&lt;&#x3D;y、x&gt;&#x3D;y</td><td>小于、大于、小于等于、大于等于</td></tr><tr><td></td><td>x is T</td><td>如果x为类型T，则返回 true，否则返回false</td></tr><tr><td></td><td>x as T</td><td>返回转换为类型T的x，如果x不是T则返回null</td></tr><tr><td></td><td>x&#x3D;&#x3D;y、x!&#x3D;y</td><td>等于、不等于</td></tr><tr><td></td><td>x&amp;y、x|y</td><td>整型按位AND&#x2F;OR，布尔逻辑AND&#x2F;OR</td></tr><tr><td></td><td>x &amp;&amp; y</td><td>仅当x为true时，才对y求值</td></tr><tr><td></td><td>x ?? y</td><td>如果x为null，则计算结果为y，否则计算结果为x</td></tr></tbody></table><table><thead><tr><th>类别</th><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td><strong>三元</strong></td><td>x?y:z</td><td>如果x为true，则对y求值；反之对z求值</td></tr><tr><td></td><td>x&#x3D;y</td><td>赋值</td></tr><tr><td></td><td>x&#x3D;x+y</td><td>复合赋值</td></tr><tr><td></td><td>(T x)&#x3D;&gt;y</td><td>匿名函数（lambda表达式）</td></tr></tbody></table><hr><h3 id="5-2-分支语句"><a href="#5-2-分支语句" class="headerlink" title="5.2 分支语句"></a>5.2 分支语句</h3><p><strong>if语句</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>switch语句</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="literal">default</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>for循环</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;</span><br><span class="line">    Console.WriteLine(k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>while循环</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    i3++;</span><br><span class="line">    <span class="keyword">if</span> (i3 == <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><blockquote><ul><li>这些看看就好了</li></ul></blockquote><hr><h3 id="5-3-数组"><a href="#5-3-数组" class="headerlink" title="5.3 数组"></a>5.3 数组</h3><ul><li>数组是<strong>一组相同类型</strong>的数据。</li><li>数组中的数据需要通过<strong>数字索引</strong>来访问。</li></ul><p><strong>数组的声明</strong></p><ul><li>数组的声明需要使用new关键字。</li><li>在声明数组时，可以使用｛｝来初始化数组中的元素。</li><li>如果在<strong>数组声明之初没有使用大括号来初始化数组中的元素，则需要指定数组的大小</strong>。</li><li>在<strong>声明初始化有元素的数组时，也可以指定数组大小</strong>。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明没有元素的数组</span></span><br><span class="line"><span class="built_in">int</span>[] arr1 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="comment">// 声明初始化有元素的数组</span></span><br><span class="line"><span class="built_in">int</span>[] arr2 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">6</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"><span class="comment">// 在声明初始化有元素的数组时，也可以指定数组大小</span></span><br><span class="line"><span class="built_in">string</span>[] strings = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">3</span>] &#123; <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span> &#125;;</span><br><span class="line"><span class="comment">// 不指定大小声明数组</span></span><br><span class="line"><span class="built_in">int</span>[] arr3 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>通过索引获取数组中的元素</strong></p><ul><li>给数组指定长度时，数组准备存放多少元素，长度就设置为多少</li><li>用索引获取数组内的元素时，索引从0开始获取。</li><li>所以数组中最大的索引数字，比指定数组长度小1。</li></ul><blockquote><ul><li>这些看看就好了</li></ul></blockquote><hr><h3 id="5-4-类型转换"><a href="#5-4-类型转换" class="headerlink" title="5.4 类型转换"></a>5.4 类型转换</h3><ul><li><code>(int)</code>表示使用<strong>显式强制转换</strong>，是一种类型转换，C#<strong>默认整型是int32</strong>，因此使用此方法转成int32位，不遵循四舍五入，于是<strong>只截取到了整数部分</strong><ul><li>(int)5.21 &#x2F;&#x2F;输出5</li></ul></li><li>①<strong>int.Parse()<strong>：</strong>只支持将string类型转成int</strong>，Parse就是把String类型转换成int、char、double等<ul><li>也就是*<strong>.Parse(string)括号中的一定要是string类型</strong>。</li></ul></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String st = <span class="string">&quot;5.21&quot;</span>;</span><br><span class="line"><span class="built_in">double</span> n = <span class="number">5.21</span>;</span><br><span class="line"><span class="built_in">int</span>.Parse(st); <span class="comment">//输出5</span></span><br><span class="line"><span class="built_in">int</span>.Parse(n); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><ul><li>②<strong>Convert.Tolnt32(double value)<strong>：</strong>不完全遵循四舍五入</strong>，如果<strong>value为两个整数中间的数字，则返</strong><br><strong>回二者中的偶数</strong></li></ul><p><strong>注意</strong>：</p><ul><li>Convert.Tolnt32() 和 int.Parset() <strong>对于空值(null)的处理不同</strong>，<strong>Convert.Tolnt32(nul)会返回0而不会产生任何异常，但int.Parse(null)则会产生异常</strong></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(Convert.ToInt32(<span class="number">4.3</span>));<span class="comment">//四舍五入，输出4</span></span><br><span class="line">Console.WriteLine(Convert.ToInt32(<span class="number">4.5</span>));<span class="comment">//第一位小数为5时，4.5在4和5之间，输出偶数4</span></span><br><span class="line">Console.WriteLine(Convert.ToInt32(<span class="number">4.53</span>));<span class="comment">//四舍五入，输出5</span></span><br><span class="line">Console.WriteLine(Convert.ToInt32(<span class="number">5.3</span>));<span class="comment">//四舍五入，输出5</span></span><br><span class="line">Console.WriteLine(Convert.ToInt32(<span class="number">5.5</span>));<span class="comment">//第一位小数为5时，5.5在5和6之间，输出偶数6</span></span><br><span class="line">Console.WriteLine(Convert.ToInt32(<span class="number">5.53</span>));<span class="comment">//四舍五入，输出6</span></span><br></pre></td></tr></table></figure><hr><h3 id="5-5-函数"><a href="#5-5-函数" class="headerlink" title="5.5 函数"></a>5.5 函数</h3><ul><li>函数好比是对象的<strong>动作行为</strong>。</li><li>在定义函数要想好函数所承担的作用，<strong>职责（作用）越单一越好</strong>。</li></ul><p><strong>函数命名规范</strong></p><ul><li>函数命名使用<strong>大驼峰命名</strong>，即开头<strong>首字母大写</strong></li><li>多个单词拼接时，所有单词<strong>首字母大写</strong></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Add();</span><br><span class="line">AddCount();</span><br><span class="line">GetUserInfo();</span><br></pre></td></tr></table></figure><p><strong>函数的参数设置&amp;传参行为&amp;返回值</strong></p><ul><li>参数可认为是外部需要函数帮忙处理的数据。</li><li>外部通过传递参数的形式，将需要处理的数据交给函数处理。</li><li>函数返回值可以认为是外部调用某种行为后得到的一种反馈。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 加法方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;firstCount&quot;&gt;</span>数字1<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;secondCount&quot;&gt;</span>数字2<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> firstCount, <span class="built_in">int</span> secondCount</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> total = firstCount + secondCount;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-1-参数修饰符"><a href="#5-5-1-参数修饰符" class="headerlink" title="5.5.1 参数修饰符"></a>5.5.1 参数修饰符</h4><p>①<strong>无修饰符</strong>：如果一个参数<strong>没有用参数修饰符标记</strong>，则认为它将<strong>按值进行传递</strong>，这将意味着被调用的方法收到原始数据的一份<strong>副本</strong>。</p><ul><li>即上端调用方法后，下端修改传来的参数不会对原数据造成影响，即参数在方法中只复制了副本。</li></ul><p>示例：方法不对原字符串影响修改</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str1 = <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">SendMessage(str1);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendMessage</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span> &#123;</span><br><span class="line">    msg = <span class="string">&quot;change&quot;</span>;</span><br><span class="line">    Console.WriteLine(msg); <span class="comment">// change</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(str1); <span class="comment">// test1</span></span><br></pre></td></tr></table></figure><p>②<strong>out</strong>：<strong>输出参数由被调用的方法赋值</strong>，因此按<strong>引用传递</strong>，如果<strong>被调用的方法没有给输出参数赋值，就会出现编译错误</strong>。</p><ul><li>方法中out修饰的参数，一定要在方法内得到赋值</li><li>调用者可不赋初值，甚至<strong>可直接将声明变量写在方法调用传参中</strong></li><li>即上下端的参数指向同一个地址，修改都会受到影响。</li><li><strong>out最大的用途就是调用者只使用一次方法的调用就能获得多个返回值</strong>。</li><li>在C#7.0中要实现一次方法的调用就能获得多个返回值，<strong>建议使用元组</strong>。</li></ul><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1.方法中的修改作用到原字符串 */</span></span><br><span class="line"><span class="built_in">string</span> str1 = <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">SendMessage(<span class="keyword">out</span> str1);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendMessage</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">string</span> msg</span>)</span> &#123;</span><br><span class="line">    msg = <span class="string">&quot;change&quot;</span>;</span><br><span class="line">    Console.WriteLine(msg); <span class="comment">// change</span></span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(str1); <span class="comment">// change</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.调用方法返回多个返回值 */</span></span><br><span class="line"><span class="comment">// 这里直接在方法调用的out参数上声明变量</span></span><br><span class="line"><span class="built_in">string</span> res = SellHouse(<span class="number">100</span>, <span class="number">1000</span>, <span class="keyword">out</span> <span class="built_in">string</span> wantPrice);</span><br><span class="line">Console.WriteLine(res);</span><br><span class="line">Console.WriteLine(wantPrice);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">SellHouse</span>(<span class="params"><span class="built_in">int</span> area, <span class="built_in">int</span> price, <span class="keyword">out</span> <span class="built_in">string</span> wantPrice</span>)</span> &#123;</span><br><span class="line">    wantPrice = <span class="string">&quot;出价&quot;</span> + (area * price - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;张三买房&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③<strong>ref</strong>：<strong>调用者必须赋初值</strong>，并且<strong>可以由被调用的方法可选的重新赋值</strong>（数据是按<strong>引用传递</strong>的）。如果被调用的方法<strong>未能给ref参数赋值，也不会有编译器错误</strong>。</p><ul><li>方法中ref修饰的参数，方法内未得到赋值不报错，和out不同。</li><li>但是调用者必须赋初值，否则报错。</li></ul><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str1 = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="comment">//string str1; 报错</span></span><br><span class="line">SendMessage(<span class="keyword">ref</span> str1);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendMessage</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">string</span> msg</span>)</span> &#123;</span><br><span class="line">    msg = <span class="string">&quot;test2&quot;</span>;</span><br><span class="line">    Console.WriteLine(msg); <span class="comment">// test</span></span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(str1); <span class="comment">// test</span></span><br></pre></td></tr></table></figure><ul><li>④<strong>params</strong>：这个参数修饰符允许将一组<strong>可变的数量的参数作为单独的逻辑参数进行传递</strong>，方法只能有一个params修饰符，而且<strong>必须是方法的最后一个参数</strong>。（就是可变参数）</li></ul><p><strong>总结out和ref的区别</strong></p><ul><li>out修饰的参数必须在方法内修改，而<strong>ref可以修改也可以不修改</strong></li><li><strong>out在传入参数的时候，参数是局部变量的话，可以不用赋值</strong>，因为out一定会对其进行赋值<ul><li>out参数方法中必须赋值，所以可不需要初始值</li></ul></li><li>而ref修饰的参数，在实参必须有初始值才能调用。因为<strong>ref修饰的不一定会给它赋值</strong><ul><li>因为方法中不一定给ref参数赋值，所以一定要有初始值</li></ul></li><li>out修饰参数可在调用方法时直接声明变量，ref则不行</li></ul><hr><h2 id="6-面向对象编程（OOP）"><a href="#6-面向对象编程（OOP）" class="headerlink" title="6.面向对象编程（OOP）"></a>6.面向对象编程（OOP）</h2><h3 id="6-1-面向对象编程基本概念"><a href="#6-1-面向对象编程基本概念" class="headerlink" title="6.1 面向对象编程基本概念"></a>6.1 面向对象编程基本概念</h3><ul><li><p>面向对象编程一一Object Oriented Programming简写<strong>OOP</strong></p></li><li><p>之前所接触到的编程方式叫做面向过程</p></li><li><p>面向过程和面向对象是两种不同的编程方式</p></li><li><p>对比面向过程的特点，可以更好的了解什么是面向对象</p></li></ul><p><strong>过程和函数</strong></p><ul><li><strong>过程</strong>是早期的一个编程概念</li><li><strong>过程类似于函数，只能执行，但是没有返回值</strong></li><li><strong>函数不仅能执行，还可以返回结果</strong></li></ul><p><strong>面向过程——强调怎么做？</strong></p><ul><li><p>把完成某一个需求的所有步骤从头到尾逐步实现</p></li><li><p>根据开发需求，将某些功能独立的代码封装成一个又一个函数</p></li><li><p>最后完成的代码，就是顺序的调用不同的函数</p></li><li><p><strong>特点：</strong></p><ul><li><strong>注重步骤与过程，不注重职责分工</strong></li><li>如果需求复杂，代码会变得很复杂</li><li><strong>复杂项目，没有固定的套路，难度很大</strong></li><li>比如一个主函数，自顶向下调用多个子函数，这几个子函数又会去调用多个子子函数，形成树的结构</li></ul></li></ul><p><strong>面向对象逻辑——强调谁来做？</strong></p><ul><li><p>相比较函数，<strong>面向对象是更大的封装</strong>，根据职责，<strong>在一个对象中封装多个方法</strong></p></li><li><p>在完成某一个需求前，首先确定职责，要做的事情（方法）</p></li><li><p>根据职责确定不同的对象，在对象内部封装不同的方法（多个）</p></li><li><p>最后完成代码，就是顺序的让<strong>不同的对象调用不同的方法</strong></p></li><li><p><strong>特点：</strong></p><ul><li><p><strong>注重对象和职责，不同的对象承担不同的职责</strong></p></li><li><p>更加适合应对复杂的需求变化，是<strong>专门应对复杂项目开发，提供固定套路</strong></p></li><li><p>需要在面向过程基础上，再学习一些面向对象的语法</p></li></ul></li></ul><hr><h3 id="6-2-类和对象概念"><a href="#6-2-类和对象概念" class="headerlink" title="6.2 类和对象概念"></a>6.2 类和对象概念</h3><ul><li><p><strong>类</strong>和<strong>对象</strong>是面向对象编程的两个<strong>核心概念</strong></p></li><li><p>类是对一群具有相同特征或者行为的事物的一个统称，是<strong>抽象的，不能直接使用</strong></p><ul><li><strong>特征被称为属性</strong></li><li><strong>行为被称为方法</strong></li></ul></li><li><p>例如：类相当于制汽车是的图纸，是一个模板，是负责创建对象的</p></li></ul><p><strong>对象</strong></p><ul><li><strong>对象是由类创造出来的一个具体存在</strong>，可以直接使用</li><li>由<strong>哪一个类</strong>创造出来的<strong>对象</strong>，就拥有在哪一个类中定义的<strong>属性</strong>和<strong>方法</strong></li><li>对象就相当于用图纸制造的汽车</li></ul><blockquote><ul><li>先有类，再有对象</li></ul></blockquote><p><strong>类和对象的关系</strong></p><ul><li><strong>类是模板</strong>，对象是根据类这个<strong>模板创建</strong>出来的，应该先有类，再有对象</li><li>类只有一个，而对象可以有很多个<ul><li><strong>不同的对象之间属性的具体内容可能各不相同</strong></li></ul></li><li><strong>类中定义了什么属性和方法，对象中就有什么属性和方法，不可能多，也不可能少</strong></li></ul><hr><h3 id="6-3-类的设计"><a href="#6-3-类的设计" class="headerlink" title="6.3 类的设计"></a>6.3 类的设计</h3><ul><li>在使用面向对象开发前，应该首先分析需求，确定一下程序中需要包含哪些类</li></ul><p>在程序开发中要设计一个类，通常需要满足以下三个要素：</p><ul><li>1.<strong>类名</strong>这类事物的名称，满足大驼峰命名法</li><li>2.<strong>属性</strong>这类事物具有什么样的特征</li><li>3.<strong>方法</strong>这类事物具有什么样的行为</li></ul><p><strong>类名的确定</strong></p><ul><li><strong>名词提炼法</strong>分析<strong>整个业务流程</strong>，出现的<strong>名词</strong>，通常就是找到的<strong>类</strong>。</li></ul><p><strong>属性和方法的确定</strong></p><ul><li>对<strong>对象的特征</strong>，描述通常可以定义成属性。</li><li><strong>对象具有的行为</strong>通常可以定义为<strong>方法</strong>。注：<strong>方法一般是动作即动词</strong></li></ul><blockquote><ul><li>提示：需求没有涉及的属性或者方法在设计类时，不需要考虑，即可忽略。</li></ul></blockquote><hr><h3 id="6-4-类和对象的使用"><a href="#6-4-类和对象的使用" class="headerlink" title="6.4 类和对象的使用"></a>6.4 类和对象的使用</h3><h4 id="6-4-1-声明类"><a href="#6-4-1-声明类" class="headerlink" title="6.4.1 声明类"></a>6.4.1 声明类</h4><ul><li>声明一个类需要使用<strong>class</strong>关键字</li><li>类的属性及方法写在<code>&#123;&#125;</code>中</li><li>步骤：vs中右键项目名——添加——类</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-2-声明属性"><a href="#6-4-2-声明属性" class="headerlink" title="6.4.2 声明属性"></a>6.4.2 声明属性</h4><ul><li><p>属性在C#中较为独特，它<strong>既不同于方法，也不同于字段</strong>。</p></li><li><p>属性依旧遵循大驼峰命名法</p></li><li><p>属性最常用的书写方法：<code>public int Age &#123;get; set;&#125;</code></p></li><li><p>如果<strong>属性中具有get关键字，说明可以获取该属性的值</strong>。</p></li><li><p>如果<strong>属性中具有set关键字，说明可以向该属性设置值</strong>。</p></li><li><p>如果没有get和set关键字，则无法获取属性值以及设置属性值</p></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Csharp_Class</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>vs快捷编码 - <strong>自动属性模板</strong>：输入props，按2次Tab，自动生成一个属性声明的模板</li></ul></blockquote><h4 id="6-4-3-声明方法"><a href="#6-4-3-声明方法" class="headerlink" title="6.4.3 声明方法"></a>6.4.3 声明方法</h4><ul><li>详见函数初识</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Csharp_Class</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>()</span> &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;吃&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span> &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;跑&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-4-实例化"><a href="#6-4-4-实例化" class="headerlink" title="6.4.4 实例化"></a>6.4.4 实例化</h4><ul><li><strong>类使用关键字<code>new</code>实例化对象</strong>。</li><li>一个类可以实例化多个对象。</li><li>对象可以使用类定义的属性和方法。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在另一个类中实例化前面的类，并使用 */</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Csharp_Class</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>()</span> &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span> &#123;</span><br><span class="line">            Person p = <span class="keyword">new</span> Person();</span><br><span class="line">            p.Name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">            p.Age = <span class="number">29</span>;</span><br><span class="line">            p.Eat();</span><br><span class="line">            p.Run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-4-5-对象初始化器"><a href="#6-4-5-对象初始化器" class="headerlink" title="6.4.5 对象初始化器"></a>6.4.5 对象初始化器</h4><ul><li><p>在实例化之时，就对其属性进行赋值。</p></li><li><p>即实例化后直接跟随一个大括号，其中写明属性的赋值，注意这之中分隔符为逗号</p></li><li><p>可以不带括号了，直接连接大括号</p></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在另一个类中实例化前面的类，并使用 */</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Csharp_Class</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>()</span> &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span> &#123;</span><br><span class="line">            <span class="comment">// 拓展：对象初始化器：在实例化之时，就对其属性进行赋值</span></span><br><span class="line">            Person p2 = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">                Age = <span class="number">18</span>,</span><br><span class="line">                Name = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-6-访问修饰符"><a href="#6-4-6-访问修饰符" class="headerlink" title="6.4.6 访问修饰符"></a>6.4.6 访问修饰符</h4><ul><li><p><strong>public</strong>：公有的所有的类都可以访问</p></li><li><p><strong>private</strong>：私有的当前类内部可访问</p></li><li><p><strong>protected</strong>：受保护的当前类以及继承他的子类可访问</p></li><li><p><strong>internal</strong>：内部的只限于本项目内访问，其他的不能访问。</p></li><li><p><strong>protected internal</strong>：内部保护访问只能是本项目内部或子类访问其他类不能访问</p></li><li><p><strong>访问级别约束</strong>：</p><ul><li><strong>父类子类访问修饰符要保持一致</strong></li><li><strong>方法的访问修饰符 要和 方法参数的访问修饰符 保持一致</strong></li></ul></li><li><p><strong>注意</strong>：<strong>类的访问级别</strong> <strong>默认为隐式私有</strong>，因此<strong>需要加上public才可让外部访问</strong></p></li></ul><h4 id="6-4-7-static"><a href="#6-4-7-static" class="headerlink" title="6.4.7 static"></a>6.4.7 static</h4><ul><li><strong>静态方法、属性</strong><ul><li>静态属性和方法 通过**<code>static</code>关键字**修饰</li><li>静态属性和方法 <strong>可以通过类型直接获取</strong>，<strong>非静态则必须通过实例化的对象获取</strong></li></ul></li><li><strong>静态类</strong><ul><li>静态类通过**<code>static</code>关键字**修饰</li><li>一般情况下类型不需要使用静态修饰，只有当类型中存在扩展方法时需要使用<strong>静态类</strong></li></ul></li></ul><hr><h2 id="7-集合-amp-字典的使用"><a href="#7-集合-amp-字典的使用" class="headerlink" title="7.集合&amp;字典的使用"></a>7.集合&amp;字典的使用</h2><h3 id="7-1-集合的使用"><a href="#7-1-集合的使用" class="headerlink" title="7.1 集合的使用"></a>7.1 集合的使用</h3><ul><li><strong>集合与数组比较类似</strong>，<strong>都用于存放一组值</strong></li></ul><h4 id="7-1-1-数组的优劣分析"><a href="#7-1-1-数组的优劣分析" class="headerlink" title="7.1.1 数组的优劣分析"></a>7.1.1 数组的优劣分析</h4><p><strong>优势</strong></p><ul><li>数组在<strong>内存中是连续存储</strong>的，所以它的<strong>索引速度是非常的快</strong>，而且赋值与修改元素也很简单。</li></ul><p><strong>劣势</strong></p><ul><li>在数组的<strong>两个数据间插入数据很麻烦</strong></li><li>在<strong>声明数组</strong>的时候，<strong>必须同时指明数组的长度</strong>，<strong>数组的长度过长，会造成内存浪费，数组和长度过短，会造成数据溢出的错误</strong></li></ul><h4 id="7-1-2-ArrayList的使用"><a href="#7-1-2-ArrayList的使用" class="headerlink" title="7.1.2 ArrayList的使用"></a>7.1.2 ArrayList的使用</h4><ul><li><strong>ArrayList</strong>是 <strong>.NET Framework</strong> 提供的<strong>用于数据存储和检索的专用类</strong></li><li>它是命名空间 <strong>System.Collections</strong>下的一部分</li></ul><p><strong>ArrayList的优势</strong></p><ul><li><p>ArrayList的<strong>大小是按照其中存储的数据来动态扩充与收缩的</strong></p></li><li><p>在<strong>声明</strong> ArrayList 对象时并<strong>不需要指定它的长度</strong></p></li><li><p>ArrayList可以很<strong>方便的进行数据的添加，插入和移除</strong></p></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">arrayList.Add(<span class="number">123</span>);</span><br><span class="line">arrayList.Add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">arrayList.Insert(<span class="number">1</span>, <span class="number">123</span> + <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">arrayList.RemoveAt(<span class="number">0</span>);</span><br><span class="line">arrayList.Remove(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><ul><li>从上面示例看，ArrayList好像是解决了数组中所有的缺点，那么它应该就是完美的。 可是<strong>在C#2.0 后又出现了List集合</strong>，这是为何？</li></ul></blockquote><p><strong>ArrayList的劣势</strong></p><ul><li><p>ArrayList在<strong>存储数据时时是使用 object类型 进行存储的</strong></p><ul><li>object是所有类的父类（父类可接收子类的对象）</li></ul></li><li><p>ArrayList<strong>不是类型安全的</strong>，使用时<strong>很可能会出现类型不匹配的错误</strong></p></li><li><p>就算都有插入了统一类型的数据，但在使用的时候，也需要将它们从object转化为对应的原类型来处理</p></li><li><p><strong>ArrayList的存储存在 装箱 和 拆箱 操作，导致其性能低下</strong></p></li></ul><h4 id="7-1-3-装箱与拆箱的概念"><a href="#7-1-3-装箱与拆箱的概念" class="headerlink" title="7.1.3 装箱与拆箱的概念"></a>7.1.3 装箱与拆箱的概念</h4><ul><li><strong>装箱</strong>：将比如int类型或者string等 <strong>不同类型的对象</strong> 通过 <strong>隐式转换</strong> <strong>赋给object对象</strong>。（子赋给父）</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">object</span> o = i;</span><br></pre></td></tr></table></figure><ul><li><strong>拆箱</strong>：将 <strong>object对象</strong> 通过<strong>显式转换</strong> <strong>赋给int类型的变量</strong>（父转换为子）<ul><li>显式转换的前提是，被转换者的类型确实是这个类型。否则报错</li></ul></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">object</span> o = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">int</span> i = (<span class="built_in">int</span>)o;</span><br></pre></td></tr></table></figure><ul><li><strong>装箱与拆箱的过程会产生较多的性能损耗</strong>。</li><li>正是因为<strong>ArrayList</strong>存在 <strong>不安全类型</strong> 与 <strong>装箱拆箱</strong> 的缺点，所以在<strong>C#2.0后出现了泛型的概念</strong>。</li><li>泛型的概念在此先不多做表述，可以简单理解成：<strong>限制集合只能够存储单一类型数据的一种手段</strong></li></ul><h4 id="7-1-4-List集合"><a href="#7-1-4-List集合" class="headerlink" title="7.1.4 List集合"></a>7.1.4 List集合</h4><ul><li>目前只学习List集合这一种类型即可，以此为突破口，以后再学习其他集合就会非常容易</li></ul><p><strong>List集合的声明</strong></p><ul><li><p>List集合与ArrayList由于都继承成了相同的接口，故<strong>使用与ArrayList相似</strong>。</p></li><li><p><strong>在声明List集合时，需要同时为其声明List集合内数据的对象类型</strong></p></li><li><p>示例：<code>List&lt;int&gt; intList = new List&lt;int&gt;()</code></p></li></ul><blockquote><ul><li><strong>接口</strong>：限制和规定类型行为即类型方法的一种手段。</li></ul></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; ints = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">ints.Add(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//ints.Add(&quot;abc&quot;);</span></span><br><span class="line">ints[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">ints[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">ints.Insert(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">ints.RemoveAt(<span class="number">0</span>);</span><br><span class="line">ints.Remove(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 对象初始化器方式</span></span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; ints2 = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line">ints2.Clear();</span><br></pre></td></tr></table></figure><blockquote><ul><li>上例中，如果往List集合中插入string字符串”abc”，系统就会报错，且不能通过编译。这样就<strong>避免了前面讲的类型安全问题与装箱拆箱的性能问题</strong></li></ul></blockquote><p><strong>在List集合中使用自己创建的类</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; people = <span class="keyword">new</span> List&lt;Person&gt;();</span><br><span class="line">Person person1 = <span class="keyword">new</span> Person &#123;</span><br><span class="line">    Age = <span class="number">18</span>,</span><br><span class="line">    Height = <span class="number">178</span>,</span><br><span class="line">    Name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">people.Add(person1);</span><br><span class="line">people.Add(person1);</span><br><span class="line">people.Add(<span class="keyword">new</span> Person &#123;</span><br><span class="line">    Age = <span class="number">18</span>,</span><br><span class="line">    Height = <span class="number">178</span>,</span><br><span class="line">    Name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line">Person person2 = people[<span class="number">0</span>];</span><br><span class="line">people.RemoveAt(<span class="number">0</span>);</span><br><span class="line">people.Remove(person1);</span><br></pre></td></tr></table></figure><blockquote><ul><li>注意remove方法删除的是指定地址的对象，而每次new出来的对象即使属性相同但是地址不同，还是不同的对象，那么就不能同时被删除掉</li></ul></blockquote><p><strong>总结</strong></p><ul><li><p>集合与数组比较类似，都用于存放<strong>一组值</strong></p></li><li><p>集合中提供了特定的方法能直接操作集合中的数据，并提供了不同的集合类来实现特定的功能</p></li><li><p>简单的说就是数组的升级版。 他可以动态的对集合的长度（也就是集合内最大元素的个数）进行定义和维护</p></li><li><p>List泛型的好处指通过允许指定 <strong>泛型类或方法</strong> 操作的 <strong>特定类型</strong>， 减少了类型 <strong>强制转换</strong> 的需要和运行时错误的可能性，<strong>泛型提供了类型安全，但没有增加开销</strong>。（不会发生装箱和拆箱）</p></li></ul><hr><h3 id="7-2-字典的使用"><a href="#7-2-字典的使用" class="headerlink" title="7.2 字典的使用"></a>7.2 字典的使用</h3><ul><li><p>即一个萝卜一个坑，每一个标记有不重复编号的坑都只能放一个萝卜或者其它东西</p></li><li><p>Dictionary有 <code>key</code>(键) 和 <code>value</code>(值)，<strong>一个键只能对应一种值</strong></p></li><li><p>一个value可以有很多key，但是key是唯一的。</p><ul><li>比如学生是唯一的，成绩不唯一</li></ul></li><li><p><strong>总结：键唯一，值不唯一</strong></p></li></ul><p><strong>Dictionary声明</strong></p><ul><li>在声明Dictionary字典时，需要<strong>同时为其声明Dictionary字典内键与值的类型</strong>。</li><li>示例：<code>Dictionary&lt;int,string&gt; dictionary = new Dictionary&lt;int, string&gt;()</code></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; dictionary = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line"><span class="comment">// 方式一：Add方法赋值</span></span><br><span class="line">dictionary.Add(<span class="number">1</span>, <span class="string">&quot;98分&quot;</span>);</span><br><span class="line">dictionary.Add(<span class="number">2</span>, <span class="string">&quot;92分&quot;</span>);</span><br><span class="line">dictionary.Add(<span class="number">3</span>, <span class="string">&quot;89分&quot;</span>);</span><br><span class="line">dictionary.Add(<span class="number">1</span>, <span class="string">&quot;88分&quot;</span>); <span class="comment">// 运行后系统会报错（重复键）</span></span><br><span class="line"><span class="comment">// 方式二：索引器赋值</span></span><br><span class="line">dictionary[<span class="number">1</span>] = <span class="string">&quot;88分&quot;</span>; <span class="comment">//系统不报错</span></span><br><span class="line">dictionary[<span class="number">4</span>] = <span class="string">&quot;99分&quot;</span>;</span><br><span class="line"><span class="comment">// 方式三：对象初始化器</span></span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dictionary2 = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &#123;</span><br><span class="line">    &#123; <span class="string">&quot;A&quot;</span>, <span class="string">&quot;aa&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;B&quot;</span>, <span class="string">&quot;bb&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;C&quot;</span>, <span class="string">&quot;cc&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Dictionary取值和删除</strong></p><ul><li>Dictionary索引器中写的键，获取到的是单个的对应值</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取键为1的值</span></span><br><span class="line"><span class="comment">// 方式一：索引器取值</span></span><br><span class="line"><span class="built_in">string</span> <span class="keyword">value</span> = dictionary[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：foreach遍历取值（这里遍历项就是每一个小键值对，用KeyValuePair专门定义可设置或检索的键值对）</span></span><br><span class="line"><span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; item <span class="keyword">in</span> dictionary) &#123;</span><br><span class="line">    <span class="built_in">string</span> value2 = item.Value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除键为1的键值对</span></span><br><span class="line">dictionary.Remove(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li><strong>键与值可以是任何类型， 但是键必须在设置时是唯一的， 而值可以不唯一</strong></li><li>使用Add(）方法添加键值对，<strong>不可添加已有的键名</strong></li><li><strong>索引模式可以 新赋值 也可以 修改 已有的键值</strong>（<strong>注意不是下标</strong>）</li><li><strong>字典是键值对的集合</strong></li></ul><hr><h3 id="7-3-foreach使用"><a href="#7-3-foreach使用" class="headerlink" title="7.3 foreach使用"></a>7.3 foreach使用</h3><ul><li>foreach就是传说中的<strong>增强for循环</strong>或者称作<strong>foreach循环</strong></li><li>foreach<strong>对遍历字典或集合具备天然优势</strong>， <strong>效率高过for循环</strong><ul><li>它循环的对象继承了迭代器</li></ul></li></ul><p><strong>foreach操作数组</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] ints = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> item <span class="keyword">in</span> ints) &#123;</span><br><span class="line">    <span class="comment">// 每次循环，其item都是整型数组中的一个元素</span></span><br><span class="line">    MessageBox.Show(item.ToString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>foreach操作集合</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; intList = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> item <span class="keyword">in</span> intList) &#123;</span><br><span class="line">    <span class="comment">// 每次循环，其item都是List集合中的一个元素</span></span><br><span class="line">    MessageBox.Show(item.ToString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>foreach操作字典</strong></p><ul><li>这里的item就是一个小键值对</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; item <span class="keyword">in</span> dictionary) &#123;</span><br><span class="line">    <span class="built_in">int</span> key0 = item.Key;</span><br><span class="line">    <span class="built_in">string</span> value0 = item.Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用var类型推断</strong></p><ul><li>var关键字的作用是<strong>推断类型</strong>，<strong>声明的时候必须赋值</strong>。赋值到什么类型就成为什么类型</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; listInt = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> listInt)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>那么至此C#大概常用的简单语法就学完了</li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;这学期突然要学C#，那就学吧。以下笔记仅作自用&lt;/p&gt;</summary>
    
    
    
    <category term="DOTNET" scheme="https://setinsung.github.io/categories/dotnet/"/>
    
    
    <category term="C#" scheme="https://setinsung.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>开始</title>
    <link href="https://setinsung.github.io/blog/2023-02-28-start/"/>
    <id>https://setinsung.github.io/blog/2023-02-28-start/</id>
    <published>2023-02-28T14:59:27.000Z</published>
    <updated>2023-03-03T17:59:09.817Z</updated>
    
    <content type="html"><![CDATA[<p>从博客的博客的博客中看到了以下内容，我觉得确实，随便写点东西也会有用的。</p><span id="more"></span><h4 id="日记的作用"><a href="#日记的作用" class="headerlink" title="日记的作用"></a>日记的作用</h4><p>作者链接: <a href="https://herman.bearblog.dev/years-of-journaling/">对6年日记|的观察ᕕ( ᐛ )ᕗ 赫尔曼的博客 (bearblog.dev)</a></p><p>编程有一个术语叫做”橡皮鸭”，指的是这样一种场景:</p><p>程序员遇到一个特别困难的问题，有时会找到其他人，向他人描述这个问题，希望其他人给点建议。</p><p>但是，在描述问题时，为了让他人理解，程序员会逐渐理清思路，有时还没等其他人给出建议，自己就悟到应该怎么解决了。</p><p>这样的场景中，其他人的作用完全可以用一个橡皮鸭代替。如果遇到想不清楚的问题，就可以尝试对着一只橡皮鸭来解释这个问题，想象怎么描述，可以让橡皮鸭理解这个问题。</p><p>在某些方面，作者觉得，日记就是他的橡皮鸭。</p><p>在日记里面描述那些困难的问题，可以帮助理清思路，构建想法，反思自己的做法和情绪，并锻炼自己更好的表达能力。</p><p>他说他已经坚持写日记六七年。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从博客的博客的博客中看到了以下内容，我觉得确实，随便写点东西也会有用的。&lt;/p&gt;</summary>
    
    
    
    <category term="日记" scheme="https://setinsung.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="journal" scheme="https://setinsung.github.io/tags/journal/"/>
    
  </entry>
  
</feed>
